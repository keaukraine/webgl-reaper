{"version":3,"file":"index.min.js","sources":["../../../node_modules/webgl-framework/dist/webgl-framework.es6.js","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../src/CameraMode.ts","../../../src/shaders/DiffuseColoredShader.ts","../../../src/shaders/BendShader.ts","../../../src/CameraPositionInterpolator.ts","../../../src/shaders/DiffuseAlphaShader.ts","../../../src/shaders/DiffuseAnimatedTextureShader.ts","../../../src/shaders/DiffuseAnimatedTextureChunkedShader.ts","../../../src/TextureAnimationChunked.ts","../../../src/shaders/PointSpriteColoredShader.ts","../../../src/shaders/AtAnimatedTextureChunkedShader.ts","../../../src/shaders/LitAnimatedTextureChunkedShader.ts","../../../src/shaders/SoftDiffuseColoredShader.ts","../../../src/shaders/SoftDiffuseColoredAlphaShader.ts","../../../src/shaders/DiffuseAnimatedTextureChunkedColoredShader.ts","../../../src/shaders/SkyShader.ts","../../../src/shaders/DiffuseOneChannelShader.ts","../../../src/shaders/DepthAnimatedTextureChunkedShader.ts","../../../src/shaders/VertexVignetteShader.ts","../../../src/Renderer.ts","../../../src/FpsCamera.ts","../../../src/FreeMovement.ts","../../../src/index.ts"],"sourcesContent":["class FullScreenUtils {\r\n    /** Enters fullscreen. */\r\n    enterFullScreen() {\r\n        if (!document.fullscreenElement) {\r\n            document.documentElement.requestFullscreen({ navigationUI: \"hide\" });\r\n        }\r\n    }\r\n    /** Exits fullscreen */\r\n    exitFullScreen() {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n    }\r\n    /**\r\n     * Adds cross-browser fullscreenchange event\r\n     *\r\n     * @param exitHandler Function to be called on fullscreenchange event\r\n     */\r\n    addFullScreenListener(exitHandler) {\r\n        document.addEventListener(\"fullscreenchange\", exitHandler, false);\r\n    }\r\n    /**\r\n     * Checks fullscreen state.\r\n     *\r\n     * @return `true` if fullscreen is active, `false` if not\r\n     */\r\n    isFullScreen() {\r\n        return !!document.fullscreenElement;\r\n    }\r\n}\n\nclass BinaryDataLoader {\r\n    static async load(url) {\r\n        const response = await fetch(url);\r\n        return response.arrayBuffer();\r\n    }\r\n}\n\nconst PKM_HEADER_SIZE = 16; // size of PKM header\r\nconst PKM_HEADER_WIDTH_OFFSET = 8; // offset to texture width\r\nconst PKM_HEADER_HEIGHT_OFFSET = 10; // offset to texture height\r\nconst ETC1_RGB8_OES = 36196;\r\nclass CompressedTextureLoader {\r\n    /**\r\n     * Loads ETC1 texture in PKM container.\r\n     *\r\n     * @param url URL to texture PKM file.\r\n     * @param gl WebGL context.\r\n     */\r\n    static async loadETC1(url, gl) {\r\n        const texture = gl.createTexture();\r\n        const data = await BinaryDataLoader.load(url);\r\n        if (data.byteLength > 0) {\r\n            // Endianness depends on machine architecture, can't read Int16\r\n            // In PKM, width and height are big-endian, and x86 is little-endian and ARM is bi-endian\r\n            const bufWidth = new Uint8Array(data, PKM_HEADER_WIDTH_OFFSET, 2);\r\n            const width = bufWidth[0] * 256 + bufWidth[1];\r\n            const bufHeight = new Uint8Array(data, PKM_HEADER_HEIGHT_OFFSET, 2);\r\n            const height = bufHeight[0] * 256 + bufHeight[1];\r\n            const bufData = new Uint8Array(data, PKM_HEADER_SIZE, data.byteLength - PKM_HEADER_SIZE);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, ETC1_RGB8_OES, width, height, 0, bufData);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            console.log('Loaded texture ' + url + ' [' + width + 'x' + height + ']');\r\n            return texture;\r\n        }\r\n        else {\r\n            throw new Error(\"No texture data received\");\r\n        }\r\n    }\r\n}\n\nclass UncompressedTextureLoader {\r\n    static load(url, gl, minFilter = gl.LINEAR, magFilter = gl.LINEAR, clamp = false) {\r\n        return new Promise((resolve, reject) => {\r\n            const texture = gl.createTexture();\r\n            if (texture === null) {\r\n                reject(\"Error creating WebGL texture\");\r\n                return;\r\n            }\r\n            const image = new Image();\r\n            image.src = url;\r\n            image.onload = () => {\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n                if (clamp === true) {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                }\r\n                else {\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n                }\r\n                gl.bindTexture(gl.TEXTURE_2D, null);\r\n                if (image && image.src) {\r\n                    console.log(`Loaded texture ${url} [${image.width}x${image.height}]`);\r\n                }\r\n                resolve(texture);\r\n            };\r\n            image.onerror = () => reject(\"Cannot load image\");\r\n        });\r\n    }\r\n    static async loadCubemap(url, gl) {\r\n        const texture = gl.createTexture();\r\n        if (texture === null) {\r\n            throw new Error(\"Error creating WebGL texture\");\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        const promises = [\r\n            { type: gl.TEXTURE_CUBE_MAP_POSITIVE_X, suffix: \"-posx.png\" },\r\n            { type: gl.TEXTURE_CUBE_MAP_NEGATIVE_X, suffix: \"-negx.png\" },\r\n            { type: gl.TEXTURE_CUBE_MAP_POSITIVE_Y, suffix: \"-posy.png\" },\r\n            { type: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, suffix: \"-negy.png\" },\r\n            { type: gl.TEXTURE_CUBE_MAP_POSITIVE_Z, suffix: \"-posz.png\" },\r\n            { type: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, suffix: \"-negz.png\" }\r\n        ].map(face => new Promise((resolve, reject) => {\r\n            const image = new Image();\r\n            image.src = url + face.suffix;\r\n            image.onload = () => {\r\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n                gl.texImage2D(face.type, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n                if (image && image.src) {\r\n                    console.log(`Loaded texture ${url}${face.suffix} [${image.width}x${image.height}]`);\r\n                }\r\n                resolve();\r\n            };\r\n            image.onerror = () => reject(\"Cannot load image\");\r\n        }));\r\n        await Promise.all(promises);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        return texture;\r\n    }\r\n}\n\nclass FullModel {\r\n    /** Default constructor. */\r\n    constructor() {\r\n        /** Number of model indices. */\r\n        this.numIndices = 0;\r\n    }\r\n    loadBuffer(gl, buffer, target, arrayBuffer) {\r\n        var byteArray = new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength);\r\n        gl.bindBuffer(target, buffer);\r\n        gl.bufferData(target, byteArray, gl.STATIC_DRAW);\r\n    }\r\n    /**\r\n     * Loads model.\r\n     *\r\n     * @param url Base URL to model indices and strides files.\r\n     * @param gl WebGL context.\r\n     * @returns Promise which resolves when model is loaded.\r\n     */\r\n    async load(url, gl) {\r\n        const [dataIndices, dataStrides] = await Promise.all([\r\n            BinaryDataLoader.load(`${url}-indices.bin`),\r\n            BinaryDataLoader.load(`${url}-strides.bin`)\r\n        ]);\r\n        console.log(`Loaded ${url}-indices.bin (${dataIndices.byteLength} bytes)`);\r\n        console.log(`Loaded ${url}-strides.bin (${dataStrides.byteLength} bytes)`);\r\n        this.bufferIndices = gl.createBuffer();\r\n        this.loadBuffer(gl, this.bufferIndices, gl.ELEMENT_ARRAY_BUFFER, dataIndices);\r\n        this.numIndices = dataIndices.byteLength / 2 / 3;\r\n        this.bufferStrides = gl.createBuffer();\r\n        this.loadBuffer(gl, this.bufferStrides, gl.ARRAY_BUFFER, dataStrides);\r\n    }\r\n    /**\r\n     * Binds buffers for a `glDrawElements()` call.\r\n     *\r\n     * @param gl WebGL context.\r\n     */\r\n    bindBuffers(gl) {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferStrides);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufferIndices);\r\n    }\r\n    /**\r\n     * Returns number of indices in model.\r\n     *\r\n     * @return Number of indices\r\n     */\r\n    getNumIndices() {\r\n        return this.numIndices;\r\n    }\r\n}\n\nclass BaseShader {\r\n    /**\r\n     * Constructor. Compiles shader.\r\n     *\r\n     * @param gl WebGL context.\r\n     */\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.vertexShaderCode = \"\";\r\n        this.fragmentShaderCode = \"\";\r\n        this.fillCode();\r\n        this.initShader();\r\n    }\r\n    /**\r\n     * Creates WebGL shader from code.\r\n     *\r\n     * @param type Shader type.\r\n     * @param code GLSL code.\r\n     * @returns Shader or `undefined` if there were errors during shader compilation.\r\n     */\r\n    getShader(type, code) {\r\n        const shader = this.gl.createShader(type);\r\n        if (!shader) {\r\n            console.warn('Error creating shader.');\r\n            return undefined;\r\n        }\r\n        this.gl.shaderSource(shader, code);\r\n        this.gl.compileShader(shader);\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            console.warn(this.gl.getShaderInfoLog(shader));\r\n            return undefined;\r\n        }\r\n        return shader;\r\n    }\r\n    /**\r\n     * Get shader unform location.\r\n     *\r\n     * @param uniform Uniform name.\r\n     * @return Uniform location.\r\n     */\r\n    getUniform(uniform) {\r\n        if (this.program === undefined) {\r\n            throw new Error('No program for shader.');\r\n        }\r\n        const result = this.gl.getUniformLocation(this.program, uniform);\r\n        if (result !== null) {\r\n            return result;\r\n        }\r\n        else {\r\n            throw new Error(`Cannot get uniform \"${uniform}\".`);\r\n        }\r\n    }\r\n    /**\r\n     * Get shader attribute location.\r\n     *\r\n     * @param attrib Attribute name.\r\n     * @return Attribute location.\r\n     */\r\n    getAttrib(attrib) {\r\n        if (this.program === undefined) {\r\n            throw new Error(\"No program for shader.\");\r\n        }\r\n        return this.gl.getAttribLocation(this.program, attrib);\r\n    }\r\n    /** Initializes shader. */\r\n    initShader() {\r\n        const fragmentShader = this.getShader(this.gl.FRAGMENT_SHADER, this.fragmentShaderCode);\r\n        const vertexShader = this.getShader(this.gl.VERTEX_SHADER, this.vertexShaderCode);\r\n        const shaderProgram = this.gl.createProgram();\r\n        if (fragmentShader === undefined || vertexShader === undefined || shaderProgram === null) {\r\n            return;\r\n        }\r\n        this.gl.attachShader(shaderProgram, vertexShader);\r\n        this.gl.attachShader(shaderProgram, fragmentShader);\r\n        this.gl.linkProgram(shaderProgram);\r\n        if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\r\n            console.warn(this.constructor.name + \": Could not initialise shader\");\r\n        }\r\n        else {\r\n            console.log(this.constructor.name + \": Initialised shader\");\r\n        }\r\n        this.gl.useProgram(shaderProgram);\r\n        this.program = shaderProgram;\r\n        this.fillUniformsAttributes();\r\n    }\r\n    /** Activates shader. */\r\n    use() {\r\n        if (this.program) {\r\n            this.gl.useProgram(this.program);\r\n        }\r\n    }\r\n    /** Deletes shader. */\r\n    deleteProgram() {\r\n        if (this.program) {\r\n            this.gl.deleteProgram(this.program);\r\n        }\r\n    }\r\n}\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar degree = Math.PI / 180;\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create$2() {\n  var out = new ARRAY_TYPE(9);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction create$3() {\n  var out = new ARRAY_TYPE(16);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nfunction identity$3(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction multiply$3(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nfunction translate$2(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nfunction scale$3(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction rotate$3(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction create$4() {\n  var out = new ARRAY_TYPE(3);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction fromValues$4(x, y, z) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create$4();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction create$5() {\n  var out = new ARRAY_TYPE(4);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nfunction normalize$1(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach$1 = function () {\n  var vec = create$5();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nfunction create$6() {\n  var out = new ARRAY_TYPE(4);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar normalize$2 = normalize$1;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nvar rotationTo = function () {\n  var tmpvec3 = create$4();\n  var xUnitVec3 = fromValues$4(1, 0, 0);\n  var yUnitVec3 = fromValues$4(0, 1, 0);\n  return function (out, a, b) {\n    var dot$$1 = dot(a, b);\n\n    if (dot$$1 < -0.999999) {\n      cross(tmpvec3, xUnitVec3, a);\n      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);\n      normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot$$1 > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot$$1;\n      return normalize$2(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nvar sqlerp = function () {\n  var temp1 = create$6();\n  var temp2 = create$6();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nvar setAxes = function () {\n  var matr = create$2();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize$2(out, fromMat3(out, matr));\n  };\n}();\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction create$8() {\n  var out = new ARRAY_TYPE(2);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach$2 = function () {\n  var vec = create$8();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\nclass BaseRenderer {\r\n    constructor() {\r\n        this.mMMatrix = create$3();\r\n        this.mVMatrix = create$3();\r\n        this.mMVPMatrix = create$3();\r\n        this.mProjMatrix = create$3();\r\n        this.matOrtho = create$3();\r\n        this.m_boundTick = this.tick.bind(this);\r\n        this.isWebGL2 = false;\r\n        this.viewportWidth = 0;\r\n        this.viewportHeight = 0;\r\n    }\r\n    /** Getter for current WebGL context. */\r\n    get gl() {\r\n        if (this.m_gl === undefined) {\r\n            throw new Error(\"No WebGL context\");\r\n        }\r\n        return this.m_gl;\r\n    }\r\n    /** Logs last GL error to console */\r\n    logGLError() {\r\n        var err = this.gl.getError();\r\n        if (err !== this.gl.NO_ERROR) {\r\n            console.warn(`WebGL error # + ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * Binds 2D texture.\r\n     *\r\n     * @param textureUnit A texture unit to use\r\n     * @param texture A texture to be used\r\n     * @param uniform Shader's uniform ID\r\n     */\r\n    setTexture2D(textureUnit, texture, uniform) {\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\r\n        this.gl.uniform1i(uniform, textureUnit);\r\n    }\r\n    /**\r\n     * Binds cubemap texture.\r\n     *\r\n     * @param textureUnit A texture unit to use\r\n     * @param texture A texture to be used\r\n     * @param uniform Shader's uniform ID\r\n     */\r\n    setTextureCubemap(textureUnit, texture, uniform) {\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\r\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, texture);\r\n        this.gl.uniform1i(uniform, textureUnit);\r\n    }\r\n    /**\r\n     * Calculates FOV for matrix.\r\n     *\r\n     * @param matrix Output matrix\r\n     * @param fovY Vertical FOV in degrees\r\n     * @param aspect Aspect ratio of viewport\r\n     * @param zNear Near clipping plane distance\r\n     * @param zFar Far clipping plane distance\r\n     */\r\n    setFOV(matrix, fovY, aspect, zNear, zFar) {\r\n        const fH = Math.tan(fovY / 360.0 * Math.PI) * zNear;\r\n        const fW = fH * aspect;\r\n        frustum(matrix, -fW, fW, -fH, fH, zNear, zFar);\r\n    }\r\n    /**\r\n     * Calculates MVP matrix. Saved in this.mMVPMatrix\r\n     */\r\n    calculateMVPMatrix(tx, ty, tz, rx, ry, rz, sx, sy, sz) {\r\n        identity$3(this.mMMatrix);\r\n        rotate$3(this.mMMatrix, this.mMMatrix, 0, [1, 0, 0]);\r\n        translate$2(this.mMMatrix, this.mMMatrix, [tx, ty, tz]);\r\n        scale$3(this.mMMatrix, this.mMMatrix, [sx, sy, sz]);\r\n        rotateX(this.mMMatrix, this.mMMatrix, rx);\r\n        rotateY(this.mMMatrix, this.mMMatrix, ry);\r\n        rotateZ(this.mMMatrix, this.mMMatrix, rz);\r\n        multiply$3(this.mMVPMatrix, this.mVMatrix, this.mMMatrix);\r\n        multiply$3(this.mMVPMatrix, this.mProjMatrix, this.mMVPMatrix);\r\n    }\r\n    /** Perform each frame's draw calls here. */\r\n    drawScene() {\r\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n    /** Called on each frame. */\r\n    tick() {\r\n        requestAnimationFrame(this.m_boundTick);\r\n        this.resizeCanvas();\r\n        this.drawScene();\r\n        this.animate();\r\n    }\r\n    /**\r\n     * Initializes WebGL context.\r\n     *\r\n     * @param canvas Canvas to initialize WebGL.\r\n     */\r\n    initGL(canvas) {\r\n        const gl = canvas.getContext(\"webgl\", { alpha: false });\r\n        if (gl === null) {\r\n            throw new Error(\"Cannot initialize WebGL context\");\r\n        }\r\n        // this.isETC1Supported = !!gl.getExtension('WEBGL_compressed_texture_etc1');\r\n        return gl;\r\n    }\r\n    ;\r\n    /**\r\n     * Initializes WebGL 2 context\r\n     *\r\n     * @param canvas Canvas to initialize WebGL 2.\r\n     */\r\n    initGL2(canvas) {\r\n        let gl = canvas.getContext(\"webgl2\", { alpha: false });\r\n        if (gl === null) {\r\n            console.warn('Could not initialise WebGL 2, falling back to WebGL 1');\r\n            return this.initGL(canvas);\r\n        }\r\n        return gl;\r\n    }\r\n    ;\r\n    /**\r\n     * Initializes WebGL and calls all callbacks.\r\n     *\r\n     * @param canvasID ID of canvas element to initialize WebGL.\r\n     * @param requestWebGL2 Set to `true` to initialize WebGL 2 context.\r\n     */\r\n    init(canvasID, requestWebGL2 = false) {\r\n        this.onBeforeInit();\r\n        this.canvas = document.getElementById(canvasID);\r\n        if (this.canvas === null) {\r\n            throw new Error(\"Cannot find canvas element\");\r\n        }\r\n        this.viewportWidth = this.canvas.width;\r\n        this.viewportHeight = this.canvas.height;\r\n        this.m_gl = !!requestWebGL2 ? this.initGL2(this.canvas) : this.initGL(this.canvas);\r\n        if (this.m_gl) {\r\n            this.resizeCanvas();\r\n            this.onAfterInit();\r\n            this.initShaders();\r\n            this.loadData();\r\n            this.m_boundTick();\r\n        }\r\n        else {\r\n            this.onInitError();\r\n        }\r\n    }\r\n    /** Adjusts viewport according to resizing of canvas. */\r\n    resizeCanvas() {\r\n        if (this.canvas === undefined) {\r\n            return;\r\n        }\r\n        const cssToRealPixels = window.devicePixelRatio || 1;\r\n        const displayWidth = Math.floor(this.canvas.clientWidth * cssToRealPixels);\r\n        const displayHeight = Math.floor(this.canvas.clientHeight * cssToRealPixels);\r\n        if (this.canvas.width != displayWidth || this.canvas.height != displayHeight) {\r\n            this.canvas.width = displayWidth;\r\n            this.canvas.height = displayHeight;\r\n        }\r\n    }\r\n    /**\r\n     * Logs GL error to console.\r\n     *\r\n     * @param operation Operation name.\r\n     */\r\n    checkGlError(operation) {\r\n        let error;\r\n        while ((error = this.gl.getError()) !== this.gl.NO_ERROR) {\r\n            console.error(`${operation}: glError ${error}`);\r\n        }\r\n    }\r\n    /** @inheritdoc */\r\n    unbindBuffers() {\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n    /** @inheritdoc */\r\n    getMVPMatrix() {\r\n        return this.mMVPMatrix;\r\n    }\r\n    /** @inheritdoc */\r\n    getOrthoMatrix() {\r\n        return this.matOrtho;\r\n    }\r\n    /** @inheritdoc */\r\n    getModelMatrix() {\r\n        return this.mMMatrix;\r\n    }\r\n    /** @inheritdoc */\r\n    getViewMatrix() {\r\n        return this.mVMatrix;\r\n    }\r\n}\n\nclass FrameBuffer {\r\n    /** Constructor. */\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.m_textureHandle = null;\r\n        this.m_depthTextureHandle = null;\r\n        this.m_framebufferHandle = null;\r\n        this.m_depthbufferHandle = null;\r\n    }\r\n    /** Creates OpenGL objects */\r\n    createGLData(width, height) {\r\n        this.m_width = width;\r\n        this.m_height = height;\r\n        if (this.m_textureHandle !== null && this.m_width > 0 && this.m_height > 0) {\r\n            this.m_framebufferHandle = this.gl.createFramebuffer(); // alternative to GLES20.glGenFramebuffers()\r\n            if (this.m_textureHandle !== null) {\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.m_textureHandle);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.m_framebufferHandle);\r\n                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this.m_textureHandle, 0);\r\n                this.checkGlError(\"FB\");\r\n            }\r\n            if (this.m_depthTextureHandle === null) {\r\n                this.m_depthbufferHandle = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.m_depthbufferHandle);\r\n                this.checkGlError(\"FB - glBindRenderbuffer\");\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, this.m_width, this.m_height);\r\n                this.checkGlError(\"FB - glRenderbufferStorage\");\r\n                this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.m_depthbufferHandle);\r\n                this.checkGlError(\"FB - glFramebufferRenderbuffer\");\r\n            }\r\n            else {\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.m_depthTextureHandle);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.m_framebufferHandle);\r\n                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.m_depthTextureHandle, 0);\r\n                this.checkGlError(\"FB depth\");\r\n            }\r\n            const result = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER);\r\n            if (result != this.gl.FRAMEBUFFER_COMPLETE) {\r\n                console.error(`Error creating framebufer: ${result}`);\r\n            }\r\n            this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\r\n            // this.gl.bindTexture(this.gl.TEXTURE_2D, 0);\r\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n        }\r\n    }\r\n    checkGlError(op) {\r\n        let error;\r\n        while ((error = this.gl.getError()) !== this.gl.NO_ERROR) {\r\n            console.error(`${op}: glError ${error}`);\r\n        }\r\n    }\r\n    get width() {\r\n        return this.m_width;\r\n    }\r\n    set width(value) {\r\n        this.m_width = value;\r\n    }\r\n    get height() {\r\n        return this.m_height;\r\n    }\r\n    set height(value) {\r\n        this.m_height = value;\r\n    }\r\n    get textureHandle() {\r\n        return this.m_textureHandle;\r\n    }\r\n    set textureHandle(value) {\r\n        this.m_textureHandle = value;\r\n    }\r\n    get depthbufferHandle() {\r\n        return this.m_depthbufferHandle;\r\n    }\r\n    set depthbufferHandle(value) {\r\n        this.m_depthbufferHandle = value;\r\n    }\r\n    get framebufferHandle() {\r\n        return this.m_framebufferHandle;\r\n    }\r\n    set framebufferHandle(value) {\r\n        this.m_framebufferHandle = value;\r\n    }\r\n    get depthTextureHandle() {\r\n        return this.m_depthTextureHandle;\r\n    }\r\n    set depthTextureHandle(value) {\r\n        this.m_depthTextureHandle = value;\r\n    }\r\n}\n\n/** Utilities to create various textures. */\r\nclass TextureUtils {\r\n    /**\r\n     * Creates non-power-of-two (NPOT) texture.\r\n     *\r\n     * @param gl WebGL context.\r\n     * @param texWidth Texture width.\r\n     * @param texHeight Texture height.\r\n     * @param hasAlpha Set to `true` to create texture with alpha channel.\r\n     */\r\n    static createNpotTexture(gl, texWidth, texHeight, hasAlpha = false) {\r\n        const textureID = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, textureID);\r\n        gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        let glFormat = null, glInternalFormat = null;\r\n        if (hasAlpha) {\r\n            glFormat = gl.RGBA;\r\n            glInternalFormat = gl.RGBA;\r\n        }\r\n        else {\r\n            glFormat = gl.RGB;\r\n            glInternalFormat = gl.RGB;\r\n        }\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, texWidth, texHeight, 0, glFormat, gl.UNSIGNED_BYTE, null);\r\n        return textureID;\r\n    }\r\n    /**\r\n     * Creates depth texture.\r\n     *\r\n     * @param gl WebGL context.\r\n     * @param texWidth Texture width.\r\n     * @param texHeight Texture height.\r\n     */\r\n    static createDepthTexture(gl, texWidth, texHeight) {\r\n        const textureID = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, textureID);\r\n        gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        const version = gl.getParameter(gl.VERSION) || \"\";\r\n        const glFormat = gl.DEPTH_COMPONENT;\r\n        const glInternalFormat = version.includes(\"WebGL 2\")\r\n            ? gl.DEPTH_COMPONENT16\r\n            : gl.DEPTH_COMPONENT;\r\n        const type = gl.UNSIGNED_SHORT;\r\n        // In WebGL, we cannot pass array to depth texture.\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, texWidth, texHeight, 0, glFormat, type, null);\r\n        return textureID;\r\n    }\r\n}\n\nclass CombinedAnimation {\r\n    constructor(frames) {\r\n        this.frames = frames;\r\n        this.start = 0;\r\n        this.end = 0;\r\n        this.currentCoeff = 0;\r\n    }\r\n    getStart() {\r\n        return this.start;\r\n    }\r\n    getEnd() {\r\n        return this.end;\r\n    }\r\n    getFramesCount() {\r\n        return this.frames;\r\n    }\r\n    getCurrentCoeff() {\r\n        return this.currentCoeff;\r\n    }\r\n    clamp(i, low, high) {\r\n        return Math.max(Math.min(i, high), low);\r\n    }\r\n    animate(coeff) {\r\n        const clampedCoeff = this.clamp(coeff, 0.0, 1.0);\r\n        this.start = Math.trunc(clampedCoeff * (this.frames - 1));\r\n        if (this.start == this.frames - 1)\r\n            this.start = this.frames - 2;\r\n        this.end = this.start + 1;\r\n        this.currentCoeff = (clampedCoeff * (this.frames - 1)) - this.start;\r\n    }\r\n}\n\nclass DiffuseShader extends BaseShader {\r\n    /** @inheritdoc */\r\n    fillCode() {\r\n        this.vertexShaderCode = 'uniform mat4 view_proj_matrix;\\n' +\r\n            'attribute vec4 rm_Vertex;\\n' +\r\n            'attribute vec2 rm_TexCoord0;\\n' +\r\n            'varying vec2 vTextureCoord;\\n' +\r\n            '\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_Position = view_proj_matrix * rm_Vertex;\\n' +\r\n            '  vTextureCoord = rm_TexCoord0;\\n' +\r\n            '}';\r\n        this.fragmentShaderCode = 'precision mediump float;\\n' +\r\n            'varying vec2 vTextureCoord;\\n' +\r\n            'uniform sampler2D sTexture;\\n' +\r\n            '\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_FragColor = texture2D(sTexture, vTextureCoord);\\n' +\r\n            '}';\r\n    }\r\n    /** @inheritdoc */\r\n    fillUniformsAttributes() {\r\n        this.view_proj_matrix = this.getUniform('view_proj_matrix');\r\n        this.rm_Vertex = this.getAttrib('rm_Vertex');\r\n        this.rm_TexCoord0 = this.getAttrib('rm_TexCoord0');\r\n        this.sTexture = this.getUniform('sTexture');\r\n    }\r\n    /** @inheritdoc */\r\n    drawModel(renderer, model, tx, ty, tz, rx, ry, rz, sx, sy, sz) {\r\n        if (this.rm_Vertex === undefined || this.rm_TexCoord0 === undefined || this.view_proj_matrix === undefined) {\r\n            return;\r\n        }\r\n        const gl = renderer.gl;\r\n        model.bindBuffers(gl);\r\n        gl.enableVertexAttribArray(this.rm_Vertex);\r\n        gl.enableVertexAttribArray(this.rm_TexCoord0);\r\n        gl.vertexAttribPointer(this.rm_Vertex, 3, gl.FLOAT, false, 4 * (3 + 2), 0);\r\n        gl.vertexAttribPointer(this.rm_TexCoord0, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);\r\n        renderer.calculateMVPMatrix(tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n        gl.uniformMatrix4fv(this.view_proj_matrix, false, renderer.getMVPMatrix());\r\n        gl.drawElements(gl.TRIANGLES, model.getNumIndices() * 3, gl.UNSIGNED_SHORT, 0);\r\n        renderer.checkGlError(\"DiffuseShader glDrawElements\");\r\n    }\r\n}\n\nexport { FullScreenUtils, BinaryDataLoader, CompressedTextureLoader, UncompressedTextureLoader, FullModel, BaseShader, BaseRenderer, FrameBuffer, TextureUtils, CombinedAnimation, DiffuseShader };\n//# sourceMappingURL=webgl-framework.es6.js.map\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export enum CameraMode {\r\n    Rotating = 0,\r\n    Random = 1\r\n};\r\n","import { DiffuseShader, FullModel } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class DiffuseColoredShader extends DiffuseShader implements DrawableShader {\r\n    /** Uniforms are of type `WebGLUniformLocation` */\r\n    color: WebGLUniformLocation | undefined;\r\n    protected _color: number[] = [1, 1, 0, 0];\r\n\r\n    // Attributes are numbers.\r\n    // rm_Vertex: number | undefined;\r\n\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec2 vTextureCoord;\r\n            uniform sampler2D sTexture;\r\n            uniform vec4 color;\r\n\r\n            void main() {\r\n                gl_FragColor = texture2D(sTexture, vTextureCoord) * color;\r\n            }`;\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n\r\n        this.color = this.getUniform(\"color\");\r\n    }\r\n\r\n    public setColor(r: number, g: number, b: number, a: number) {\r\n        this._color = [r, g, b, a];\r\n    }\r\n\r\n    drawModel(renderer: RendererWithExposedMethods, model: FullModel, tx: number, ty: number, tz: number, rx: number, ry: number, rz: number, sx: number, sy: number, sz: number): void {\r\n        if (this.rm_Vertex === undefined || this.view_proj_matrix === undefined || this.color === undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl;\r\n        gl.uniform4f(this.color, this._color[0], this._color[1], this._color[2], this._color[3]);\r\n\r\n        super.drawModel(renderer, model, tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n    }\r\n}\r\n","import { DiffuseShader, FullModel } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class BendShader extends DiffuseShader implements DrawableShader {\r\n    /** Uniforms are of type `WebGLUniformLocation` */\r\n    color: WebGLUniformLocation | undefined;\r\n    radius: WebGLUniformLocation | undefined;\r\n    lengthToRadius: WebGLUniformLocation | undefined;\r\n    protected _color: number[] = [1, 1, 0, 0];\r\n    protected _radius: number = 50.0;\r\n    protected _length: number = 1.0;\r\n\r\n    // Attributes are numbers.\r\n    // rm_Vertex: number | undefined;\r\n\r\n    fillCode() {\r\n        //super.fillCode();\r\n        this.vertexShaderCode = `\r\n            uniform mat4 view_proj_matrix;\r\n            attribute vec4 rm_Vertex;\r\n            attribute vec2 rm_TexCoord0;\r\n            varying vec2 vTextureCoord;\r\n            uniform float R;\r\n            uniform float lengthToRadius;\r\n            \r\n            void main() {\r\n              float theta = rm_Vertex.x * lengthToRadius;\r\n\r\n              gl_Position = view_proj_matrix * vec4(R * sin(theta), R * cos(theta), rm_Vertex.z, 1.0);\r\n              vTextureCoord = rm_TexCoord0;\r\n            }`;\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec2 vTextureCoord;\r\n            uniform sampler2D sTexture;\r\n            uniform vec4 color;\r\n\r\n            void main() {\r\n                float alpha = texture2D(sTexture, vTextureCoord).r * color.a;\r\n                gl_FragColor = vec4(color.rgb * alpha, alpha);\r\n                //gl_FragColor = texture2D(sTexture, vTextureCoord) * color;\r\n            }`;\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n\r\n        this.color = this.getUniform(\"color\");\r\n        this.radius = this.getUniform(\"R\");\r\n        this.lengthToRadius = this.getUniform(\"lengthToRadius\");\r\n    }\r\n\r\n    public setColor(r: number, g: number, b: number, a: number) {\r\n        this._color = [r, g, b, a];\r\n    }\r\n\r\n    public setRadius(r: number) {\r\n        this._radius = r;\r\n    }\r\n\r\n    public setLength(l: number) {\r\n        this._length = l;\r\n    }\r\n\r\n    drawModel(renderer: RendererWithExposedMethods, model: FullModel, tx: number, ty: number, tz: number, rx: number, ry: number, rz: number, sx: number, sy: number, sz: number): void {\r\n        if (this.rm_Vertex === undefined || this.view_proj_matrix === undefined || this.color === undefined || this.radius == undefined || this.lengthToRadius == undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl;\r\n        gl.uniform4f(this.color, this._color[0], this._color[1], this._color[2], this._color[3]);\r\n        gl.uniform1f(this.radius, this._radius);\r\n        gl.uniform1f(this.lengthToRadius, this._length / this._radius);\r\n\r\n        super.drawModel(renderer, model, tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n    }\r\n}\r\n","import { mat4, vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport interface CameraPosition {\r\n    position: Float32Array;\r\n    rotation: Float32Array;\r\n}\r\n\r\nexport interface CameraPositionPair {\r\n    start: CameraPosition;\r\n    end: CameraPosition;\r\n}\r\n\r\nexport class CameraPositionInterpolator {\r\n    private _position: CameraPositionPair | undefined;\r\n    private _speed = 0;\r\n    private duration = 0;\r\n    private _minDuration = 3000;\r\n    private _timer = 0;\r\n    private lastTime = 0;\r\n    private _reverse = false;\r\n\r\n    private _cameraPosition = vec3.create();\r\n    private _cameraRotation = vec3.create();\r\n\r\n    private _matrix: mat4 = mat4.create();\r\n\r\n    public get cameraPosition() {\r\n        return this._cameraPosition;\r\n    }\r\n\r\n    public get cameraRotation() {\r\n        return this._cameraRotation;\r\n    }\r\n\r\n    public set reverse(value: boolean) {\r\n        this._reverse = value;\r\n    }\r\n\r\n    public set minDuration(value: number) {\r\n        this._minDuration = value;\r\n    }\r\n\r\n    public get matrix(): mat4 {\r\n        return this._matrix;\r\n    }\r\n\r\n    public get speed(): number {\r\n        return this._speed;\r\n    }\r\n\r\n    public set speed(value: number) {\r\n        this._speed = value;\r\n    }\r\n\r\n    public get position(): CameraPositionPair | undefined {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(value: CameraPositionPair | undefined) {\r\n        this._position = value;\r\n        this.duration = Math.max(this.getLength() / this.speed, this._minDuration);\r\n    }\r\n\r\n    public get timer(): number {\r\n        return this._timer;\r\n    }\r\n\r\n    private getLength(): number {\r\n        if (this.position === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        const start = this.position.start.position;\r\n        const end = this.position.end.position;\r\n\r\n        return Math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2 + (end[2] - start[2]) ** 2);\r\n    }\r\n\r\n    public iterate(timeNow: number): void {\r\n        if (this.lastTime != 0) {\r\n            const elapsed = timeNow - this.lastTime;\r\n\r\n            this._timer += elapsed / this.duration;\r\n            if (this._timer > 1.0) {\r\n                this._timer = 1.0;\r\n            }\r\n        }\r\n\r\n        this.lastTime = timeNow;\r\n\r\n        this.updateMatrix();\r\n    }\r\n\r\n    public reset() {\r\n        this._timer = 0;\r\n        this.updateMatrix();\r\n    }\r\n\r\n    private updateMatrix(): void {\r\n        if (this._position === undefined) {\r\n            return;\r\n        }\r\n\r\n        const start = this._reverse ? this._position.end : this._position.start;\r\n        const end = this._reverse ? this._position.start : this._position.end;\r\n\r\n        this._cameraPosition[0] = start.position[0] + this._timer * (end.position[0] - start.position[0]);\r\n        this._cameraPosition[1] = start.position[1] + this._timer * (end.position[1] - start.position[1]);\r\n        this._cameraPosition[2] = start.position[2] + this._timer * (end.position[2] - start.position[2]);\r\n\r\n        this._cameraRotation[0] = start.rotation[0] + this._timer * (end.rotation[0] - start.rotation[0]);\r\n        this._cameraRotation[1] = start.rotation[1] + this._timer * (end.rotation[1] - start.rotation[1]);\r\n        this._cameraRotation[2] = start.rotation[2] + this._timer * (end.rotation[2] - start.rotation[2]);\r\n\r\n        mat4.identity(this.matrix);\r\n        mat4.rotateX(this.matrix, this.matrix, this._cameraRotation[0] - Math.PI / 2.0);\r\n        mat4.rotateZ(this.matrix, this.matrix, this._cameraRotation[1]);\r\n        mat4.rotateY(this.matrix, this.matrix, this._cameraRotation[2]);\r\n        mat4.translate(this.matrix, this.matrix, [-this._cameraPosition[0], -this._cameraPosition[1], - this._cameraPosition[2]]);\r\n    }\r\n}\r\n","import { DiffuseShader } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\n\r\nexport class DiffuseAlphaShader extends DiffuseShader implements DrawableShader {\r\n    sAlphaTexture: WebGLUniformLocation | undefined;\r\n\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec2 vTextureCoord;\r\n            uniform sampler2D sTexture;\r\n            uniform sampler2D sAlphaTexture;\r\n\r\n            void main() {\r\n                float alpha = texture2D(sAlphaTexture, vTextureCoord).r;\r\n                gl_FragColor = texture2D(sTexture, vTextureCoord);\r\n                gl_FragColor.rgb *= alpha;\r\n                gl_FragColor.a = alpha;\r\n            }`;\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n\r\n        this.sAlphaTexture = this.getUniform(\"sAlphaTexture\");\r\n    }\r\n}\r\n","import { BaseShader, DiffuseShader, FullModel } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class DiffuseAnimatedTextureShader extends DiffuseShader {\r\n    // Uniforms are of type `WebGLUniformLocation`\r\n    sPositions: WebGLUniformLocation | undefined;\r\n    uTexelSizes: WebGLUniformLocation | undefined;\r\n\r\n    // Attributes are numbers.\r\n    // rm_Vertex: number | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = \"#version 300 es\\n\" +\r\n            \"precision highp float;\\n\" +\r\n            \"uniform sampler2D sPositions;\\n\" +\r\n            \"uniform vec3 uTexelSizes; // x = vertex count; y = texel half width; z = sampler y coord (animation frame)\\n\" +\r\n            \"uniform mat4 view_proj_matrix;\\n\" +\r\n            \"in vec2 rm_TexCoord0;\\n\" +\r\n            \"out vec2 vTextureCoord;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  float id = float(gl_VertexID);\" +\r\n            \"  vec4 position = texture(sPositions, vec2(id / uTexelSizes.x + uTexelSizes.y, uTexelSizes.z));\" +\r\n            \"  gl_Position = view_proj_matrix * position;\\n\" +\r\n            \"  vTextureCoord = rm_TexCoord0;\\n\" +\r\n            \"}\";\r\n\r\n        this.fragmentShaderCode =  \"#version 300 es\\n\" +\r\n            \"precision mediump float;\\n\" +\r\n            \"in vec2 vTextureCoord;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"out vec4 fragColor;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  fragColor = texture(sTexture, vTextureCoord);\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        // super.fillUniformsAttributes();\r\n        this.view_proj_matrix = this.getUniform('view_proj_matrix');\r\n        // this.rm_Vertex = this.getAttrib('rm_Vertex');\r\n        this.rm_TexCoord0 = this.getAttrib('rm_TexCoord0');\r\n        this.sTexture = this.getUniform('sTexture');\r\n        this.sPositions = this.getUniform(\"sPositions\");\r\n        this.uTexelSizes = this.getUniform(\"uTexelSizes\");\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    drawModel(\r\n        renderer: RendererWithExposedMethods,\r\n        model: FullModel,\r\n        tx: number, ty: number, tz: number,\r\n        rx: number, ry: number, rz: number,\r\n        sx: number, sy: number, sz: number\r\n    ): void {\r\n        if (this.rm_TexCoord0 === undefined || this.view_proj_matrix === undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl as WebGL2RenderingContext;\r\n\r\n        model.bindBuffers(gl);\r\n\r\n        // gl.enableVertexAttribArray(this.rm_Vertex);\r\n        gl.enableVertexAttribArray(this.rm_TexCoord0);\r\n        // gl.vertexAttribPointer(this.rm_Vertex, 3, gl.FLOAT, false, 4 * (3 + 2), 0);\r\n        gl.vertexAttribPointer(this.rm_TexCoord0, 2, gl.HALF_FLOAT, false, 4, 0);\r\n\r\n        renderer.calculateMVPMatrix(tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n\r\n        gl.uniformMatrix4fv(this.view_proj_matrix, false, renderer.getMVPMatrix());\r\n        gl.drawElements(gl.TRIANGLES, model.getNumIndices() * 3, gl.UNSIGNED_SHORT, 0);\r\n\r\n        renderer.checkGlError(\"DiffuseShader glDrawElements\");\r\n    }\r\n}\r\n","import { DiffuseAnimatedTextureShader } from \"./DiffuseAnimatedTextureShader\";\r\nimport { IAnimatedTextureChunkedShader } from \"./IAnimatedTextureChunkedShader\";\r\n\r\nexport class DiffuseAnimatedTextureChunkedShader extends DiffuseAnimatedTextureShader implements IAnimatedTextureChunkedShader {\r\n    // Uniforms are of type `WebGLUniformLocation`\r\n    uTexelHeight: WebGLUniformLocation | undefined;\r\n    uTextureWidthInt: WebGLUniformLocation | undefined;\r\n\r\n    // Attributes are numbers.\r\n    // rm_Vertex: number | undefined;\r\n\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.vertexShaderCode = \"#version 300 es\\n\" +\r\n            \"precision highp float;\\n\" +\r\n            \"uniform sampler2D sPositions;\\n\" +\r\n            \"// x = texture width; y = texel half width; z = sampler y coord (animation frame); w = chunk size\\n\" +\r\n            \"uniform vec4 uTexelSizes;\\n\" +\r\n            \"uniform float uTexelHeight;\\n\" +\r\n            \"uniform int uTextureWidthInt;\\n\" +\r\n            \"uniform mat4 view_proj_matrix;\\n\" +\r\n            \"in vec2 rm_TexCoord0;\\n\" +\r\n            \"out vec2 vTextureCoord;\\n\" +\r\n            \"\\n\" +\r\n            \"float getCenter(float y) {\\n\" +\r\n            \"  return y - mod(y, uTexelHeight) + uTexelHeight * 0.5;\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"vec4 linearFilter(vec2 coords) {\\n\" +\r\n            \"  vec2 coords1 = vec2(coords.x, coords.y - uTexelHeight * 0.49);\\n\" +\r\n            \"  vec2 coords2 = vec2(coords.x, coords.y + uTexelHeight * 0.49);\\n\" +\r\n            \"  float center1 = getCenter(coords1.y);\\n\" +\r\n            \"  float center2 = getCenter(coords2.y);\\n\" +\r\n            \"  vec4 v1 = texture(sPositions, vec2(coords1.x, center1));\\n\" +\r\n            \"  vec4 v2 = texture(sPositions, vec2(coords2.x, center2));\\n\" +\r\n            \"  float d1 = abs(coords.y - center1);\\n\" +\r\n            \"  float d2 = abs(coords.y - center2);\\n\" +\r\n            \"  if (d1 > d2) {\\n\" +\r\n            \"    return mix( v1, v2, d1 / (uTexelHeight) );\\n\" +\r\n            \"  } else {\\n\" +\r\n            \"    return mix( v2, v1, d2 / (uTexelHeight) );\\n\" +\r\n            \"  }\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  float id = float(gl_VertexID % uTextureWidthInt);\" +\r\n            \"  float chunk = float(gl_VertexID / uTextureWidthInt);\" +\r\n            \"  vec2 coords = vec2(id / uTexelSizes.x + uTexelSizes.y, uTexelSizes.z);\" +\r\n            \"  coords.y += chunk * uTexelSizes.w;\" +\r\n            \"  vec4 position = linearFilter(coords);\" +\r\n            \"  gl_Position = view_proj_matrix * position;\\n\" +\r\n            \"  vTextureCoord = rm_TexCoord0;\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n        this.uTextureWidthInt = this.getUniform(\"uTextureWidthInt\");\r\n        this.uTexelHeight = this.getUniform(\"uTexelHeight\");\r\n    }\r\n}\r\n","import { DiffuseShader } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class TextureAnimationChunked {\r\n    private m_frames = 0;\r\n    private m_vertices = 0;\r\n    private m_texelHalfWidth = 0;\r\n    private m_texelHalfHeight = 0;\r\n    private m_texelHeight = 0;\r\n    private m_textureWidth = 0;\r\n    private m_textureHeight = 0;\r\n    private m_chunkSize = 0;\r\n\r\n    constructor(textureWidth: number, vertices: number, frames: number) {\r\n        this.m_textureWidth = textureWidth;\r\n        this.m_vertices = vertices;\r\n        this.m_frames = frames;\r\n        this.m_textureHeight = Math.ceil(vertices / textureWidth) * (frames + 1);\r\n        this.m_texelHalfWidth = 1.0 / textureWidth * 0.5;\r\n        this.m_texelHalfHeight = 1.0 / this.m_textureHeight * 0.5;\r\n        this.m_texelHeight = 1.0 / this.m_textureHeight;\r\n        this.m_chunkSize = 1.0 / Math.ceil(vertices / textureWidth);\r\n    }\r\n\r\n    get chunkSize() {\r\n        return this.m_chunkSize;\r\n    }\r\n\r\n    get vertices() {\r\n        return this.m_vertices;\r\n    }\r\n\r\n    get frames() {\r\n        return this.m_frames;\r\n    }\r\n\r\n    get texelHalfWidth() {\r\n        return this.m_texelHalfWidth;\r\n    }\r\n\r\n    get texelHalfHeight() {\r\n        return this.m_texelHalfHeight;\r\n    }\r\n\r\n    get textureWidth() {\r\n        return this.m_textureWidth;\r\n    }\r\n\r\n    get textureHeight() {\r\n        return this.m_textureHeight;\r\n    }\r\n\r\n    public animateStartEndStart(timer: number): number {\r\n        const coeff = timer < 0.5\r\n            ? timer * 2\r\n            : (1 - timer) * 2;\r\n\r\n        const y = this.m_texelHeight * coeff * (this.frames - 1) + this.m_texelHalfHeight;\r\n\r\n        return y;\r\n    }\r\n\r\n    public animateStartToEnd(timer: number): number {\r\n        return this.m_texelHeight * timer * (this.frames - 1) + this.m_texelHalfHeight;\r\n    }\r\n}\r\n","import { FullModel, BaseShader } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class PointSpriteColoredShader extends BaseShader {\r\n    uMvp: WebGLUniformLocation | undefined;\r\n    uThickness: WebGLUniformLocation | undefined;\r\n    tex0: WebGLUniformLocation | undefined;\r\n    color: WebGLUniformLocation | undefined;\r\n\r\n    aPosition: number | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = \"uniform mat4 uMvp;\\n\" +\r\n            \"uniform float uThickness;\\n\" +\r\n            \"\\n\" +\r\n            \"attribute vec4 aPosition;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            // \"    vec4 position = uMvp * vec4(aPosition.xyz, 1.0);\\n\" +\r\n            \"    vec4 position = uMvp * aPosition;\\n\" +\r\n            // \"    vec3 ndc = position.xyz / position.w; // perspective divide.\\n\" +\r\n            // \"    float zDist = 1.0 - ndc.z; // 1 is close (right up in your face,)\\n\" +\r\n            // \"    gl_PointSize = uThickness * zDist;\\n\" +\r\n            \"    gl_PointSize = uThickness;\\n\" +\r\n            \"    gl_Position =  position;\\n\" +\r\n            \"}\";\r\n\r\n        this.fragmentShaderCode = \"precision mediump float;\\n\" +\r\n            \"uniform sampler2D tex0;\\n\" +\r\n            \"uniform vec4 color;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() \\n\" +\r\n            \"{\\n\" +\r\n            \"   gl_FragColor = texture2D(tex0, gl_PointCoord) * color;\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        this.uMvp = this.getUniform(\"uMvp\");\r\n        this.uThickness = this.getUniform(\"uThickness\");\r\n        this.aPosition = this.getAttrib(\"aPosition\");\r\n        this.tex0 = this.getUniform(\"tex0\");\r\n        this.color = this.getUniform(\"color\");\r\n    }\r\n}\r\n","import { DiffuseAnimatedTextureChunkedShader } from \"./DiffuseAnimatedTextureChunkedShader\";\r\n\r\nexport class AtAnimatedTextureChunkedShader extends DiffuseAnimatedTextureChunkedShader {\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode =  \"#version 300 es\\n\" +\r\n            \"precision mediump float;\\n\" +\r\n            \"in vec2 vTextureCoord;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"out vec4 fragColor;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  vec4 color = texture(sTexture, vTextureCoord);\\n\" +\r\n            \"  fragColor = color;\\n\" +\r\n            \"  if (fragColor.a < 0.1) {\\n\" +\r\n            \"    discard;\\n\" +\r\n            \"  }\\n\" +\r\n            \"}\";\r\n    }\r\n}\r\n","import { DiffuseAnimatedTextureChunkedShader } from \"./DiffuseAnimatedTextureChunkedShader\";\r\n\r\nexport class LitAnimatedTextureChunkedShader extends DiffuseAnimatedTextureChunkedShader {\r\n    sNormals: WebGLUniformLocation | undefined;\r\n    uLightDir: WebGLUniformLocation | undefined;\r\n    uLightColor: WebGLUniformLocation | undefined;\r\n    uLightIntensity: WebGLUniformLocation | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = \"#version 300 es\\n\" +\r\n            \"precision highp float;\\n\" +\r\n            \"uniform sampler2D sPositions;\\n\" +\r\n            \"uniform sampler2D sNormals;\\n\" +\r\n            \"// x = texture width; y = texel half width; z = sampler y coord (animation frame); w = chunk size\\n\" +\r\n            \"uniform vec4 uTexelSizes;\\n\" +\r\n            \"uniform float uTexelHeight;\\n\" +\r\n            \"uniform int uTextureWidthInt;\\n\" +\r\n            \"uniform vec4 uLightDir;\\n\" +\r\n            \"uniform float uLightIntensity;\\n\" +\r\n            \"uniform mat4 view_proj_matrix;\\n\" +\r\n            \"in vec2 rm_TexCoord0;\\n\" +\r\n            \"out vec2 vTextureCoord;\\n\" +\r\n            \"out float vVertexLight;\\n\" +\r\n            \"\\n\" +\r\n            \"float getCenter(float y) {\\n\" +\r\n            \"  return y - mod(y, uTexelHeight) + uTexelHeight * 0.5;\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"vec4 linearFilter(vec2 coords, sampler2D sTexture) {\\n\" +\r\n            \"  vec2 coords1 = vec2(coords.x, coords.y - uTexelHeight * 0.49);\\n\" +\r\n            \"  vec2 coords2 = vec2(coords.x, coords.y + uTexelHeight * 0.49);\\n\" +\r\n            \"  float center1 = getCenter(coords1.y);\\n\" +\r\n            \"  float center2 = getCenter(coords2.y);\\n\" +\r\n            \"  vec4 v1 = texture(sTexture, vec2(coords1.x, center1));\\n\" +\r\n            \"  vec4 v2 = texture(sTexture, vec2(coords2.x, center2));\\n\" +\r\n            \"  float d1 = abs(coords.y - center1);\\n\" +\r\n            \"  float d2 = abs(coords.y - center2);\\n\" +\r\n            \"  if (d1 > d2) {\\n\" +\r\n            \"    return mix( v1, v2, d1 / (uTexelHeight) );\\n\" +\r\n            \"  } else {\\n\" +\r\n            \"    return mix( v2, v1, d2 / (uTexelHeight) );\\n\" +\r\n            \"  }\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  float id = float(gl_VertexID % uTextureWidthInt);\" +\r\n            \"  float chunk = float(gl_VertexID / uTextureWidthInt);\" +\r\n            \"  vec2 coords = vec2(id / uTexelSizes.x + uTexelSizes.y, uTexelSizes.z);\" +\r\n            \"  coords.y += chunk * uTexelSizes.w;\" +\r\n            \"  vec4 position = linearFilter(coords, sPositions);\" +\r\n            \"  vec4 normal = linearFilter(coords, sNormals);\" +\r\n            \"  gl_Position = view_proj_matrix * position;\\n\" +\r\n            \"  vTextureCoord = rm_TexCoord0;\\n\" +\r\n            // \"  vec4 lightDir = vec4(1.0, 0.0, 0.0, 0.0);\\n\" +\r\n            \"  float d = pow( max(0.0, dot(normal, uLightDir)), 5.0 );\\n\" +\r\n            // \"  float d = clamp(pow(dot(normal, lightDir), 13.0), 0.0, 1.0);\\n\" +\r\n            \"  vVertexLight = d * uLightIntensity;\\n\" +\r\n            // \"  vVertexLight = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0), d);\\n\" +\r\n            \"}\";\r\n\r\n        this.fragmentShaderCode = \"#version 300 es\\n\" +\r\n            \"precision mediump float;\\n\" +\r\n            \"in vec2 vTextureCoord;\\n\" +\r\n            \"in float vVertexLight;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"uniform vec4 uLightColor;\\n\" +\r\n            \"out vec4 fragColor;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  vec4 color = texture(sTexture, vTextureCoord);\\n\" +\r\n            // \"  fragColor = color;\\n\" +\r\n            // \"  fragColor *= 0.1; fragColor += vVertexLight;\\n\" +\r\n            \"  vec4 highlight = color + uLightColor;\\n\" +\r\n            \"  fragColor = mix(color, highlight, vVertexLight);\\n\" +\r\n\r\n            // \"  fragColor = color * vVertexLight;\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n        this.sNormals = this.getUniform(\"sNormals\");\r\n        this.uLightDir = this.getUniform(\"uLightDir\");\r\n        this.uLightColor = this.getUniform(\"uLightColor\");\r\n        this.uLightIntensity = this.getUniform(\"uLightIntensity\");\r\n    }\r\n}\r\n","import { FullModel, DiffuseShader } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class SoftDiffuseColoredShader extends DiffuseShader {\r\n    view_proj_matrix: WebGLUniformLocation | undefined;\r\n    model_matrix: WebGLUniformLocation | undefined;\r\n    sTexture: WebGLUniformLocation | undefined;\r\n    cameraRange: WebGLUniformLocation | undefined;\r\n    sDepth: WebGLUniformLocation | undefined;\r\n    invViewportSize: WebGLUniformLocation | undefined;\r\n    transitionSize: WebGLUniformLocation | undefined;\r\n    color: WebGLUniformLocation | undefined;\r\n\r\n    rm_Vertex: number | undefined;\r\n    rm_TexCoord0: number | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = \"uniform mat4 view_proj_matrix;\\n\" +\r\n            \"attribute vec4 rm_Vertex;\\n\" +\r\n            \"attribute vec2 rm_TexCoord0;\\n\" +\r\n            \"varying vec2 vTextureCoord;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  gl_Position = view_proj_matrix * rm_Vertex;\\n\" +\r\n            \"  vTextureCoord = rm_TexCoord0;\\n\" +\r\n            \"}\";\r\n\r\n        this.fragmentShaderCode = \"precision highp float;\\n\" +\r\n            \"uniform vec2 uCameraRange;\\n\" +\r\n            \"uniform vec2 uInvViewportSize;\\n\" +\r\n            \"uniform float uTransitionSize;\\n\" +\r\n            \"float calc_depth(in float z)\\n\" +\r\n            \"{\\n\" +\r\n            \"  return (2.0 * uCameraRange.x) / (uCameraRange.y + uCameraRange.x - z*(uCameraRange.y - uCameraRange.x));\\n\" +\r\n            \"}\\n\" +\r\n            \"uniform sampler2D sDepth;\\n\" +\r\n            \"varying vec2 vTextureCoord;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"uniform vec4 color;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"   vec4 diffuse = texture2D(sTexture, vTextureCoord) * color;\\n\" + // particle base diffuse color\r\n            // \"   diffuse += vec4(0.0, 0.0, 1.0, 1.0);\\n\"+ // uncomment to visualize particle shape\r\n            \"   vec2 coords = gl_FragCoord.xy * uInvViewportSize;\\n\" + // calculate depth texture coordinates\r\n            \"   float geometryZ = calc_depth(texture2D(sDepth, coords).r);\\n\" + // lineriarize particle depth\r\n            \"   float sceneZ = calc_depth(gl_FragCoord.z);\\n\" + // lineriarize scene depth\r\n            \"   float a = clamp(geometryZ - sceneZ, 0.0, 1.0);\\n\" + // linear clamped diff between scene and particle depth\r\n            \"   float b = smoothstep(0.0, uTransitionSize, a);\\n\" + // apply smoothstep to make soft transition\r\n            \"   gl_FragColor = diffuse * b;\\n\" + // final color with soft edge\r\n            // \"   gl_FragColor *= pow(1.0 - gl_FragCoord.z, 0.3);\\n\" +\r\n            // \"   gl_FragColor = vec4(a, a, a, 1.0);\\n\" + // uncomment to visualize raw Z difference\r\n            // \"   gl_FragColor = vec4(b, b, b, 1.0);\\n\" + // uncomment to visualize blending coefficient\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        this.view_proj_matrix = this.getUniform(\"view_proj_matrix\");\r\n        this.rm_Vertex = this.getAttrib(\"rm_Vertex\");\r\n        this.rm_TexCoord0 = this.getAttrib(\"rm_TexCoord0\");\r\n        this.sTexture = this.getUniform(\"sTexture\");\r\n        this.cameraRange = this.getUniform(\"uCameraRange\");\r\n        this.sDepth = this.getUniform(\"sDepth\");\r\n        this.invViewportSize = this.getUniform(\"uInvViewportSize\");\r\n        this.transitionSize = this.getUniform(\"uTransitionSize\");\r\n        this.color = this.getUniform(\"color\");\r\n    }\r\n}\r\n","import { FullModel, DiffuseShader } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\nimport { SoftDiffuseColoredShader } from \"./SoftDiffuseColoredShader\";\r\n\r\nexport class SoftDiffuseColoredAlphaShader extends SoftDiffuseColoredShader {\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode = \"precision highp float;\\n\" +\r\n            \"uniform vec2 uCameraRange;\\n\" +\r\n            \"uniform vec2 uInvViewportSize;\\n\" +\r\n            \"uniform float uTransitionSize;\\n\" +\r\n            \"float calc_depth(in float z)\\n\" +\r\n            \"{\\n\" +\r\n            \"  return (2.0 * uCameraRange.x) / (uCameraRange.y + uCameraRange.x - z*(uCameraRange.y - uCameraRange.x));\\n\" +\r\n            \"}\\n\" +\r\n            \"uniform sampler2D sDepth;\\n\" +\r\n            \"varying vec2 vTextureCoord;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"uniform vec4 color;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"   vec4 mask = vec4(texture2D(sTexture, vTextureCoord).rrr, 1.0);\\n\" + // particle base diffuse color\r\n            \"   vec4 diffuse = mask * color;\\n\" + // particle base diffuse color\r\n            // \"   diffuse += vec4(0.0, 0.0, 1.0, 1.0);\\n\"+ // uncomment to visualize particle shape\r\n            \"   vec2 coords = gl_FragCoord.xy * uInvViewportSize;\\n\" + // calculate depth texture coordinates\r\n            \"   float geometryZ = calc_depth(texture2D(sDepth, coords).r);\\n\" + // lineriarize particle depth\r\n            \"   float sceneZ = calc_depth(gl_FragCoord.z);\\n\" + // lineriarize scene depth\r\n            \"   float a = clamp(geometryZ - sceneZ, 0.0, 1.0);\\n\" + // linear clamped diff between scene and particle depth\r\n            \"   float b = smoothstep(0.0, uTransitionSize, a);\\n\" + // apply smoothstep to make soft transition\r\n            \"   b = b * mask.r * color.w;\\n\" +\r\n            \"   gl_FragColor = vec4(diffuse.rgb * b, b);\\n\" + // final color is multiplied by alpha, with soft edge\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        this.view_proj_matrix = this.getUniform(\"view_proj_matrix\");\r\n        this.rm_Vertex = this.getAttrib(\"rm_Vertex\");\r\n        this.rm_TexCoord0 = this.getAttrib(\"rm_TexCoord0\");\r\n        this.sTexture = this.getUniform(\"sTexture\");\r\n        this.cameraRange = this.getUniform(\"uCameraRange\");\r\n        this.sDepth = this.getUniform(\"sDepth\");\r\n        this.invViewportSize = this.getUniform(\"uInvViewportSize\");\r\n        this.transitionSize = this.getUniform(\"uTransitionSize\");\r\n        this.color = this.getUniform(\"color\");\r\n    }\r\n}\r\n","import { DiffuseAnimatedTextureChunkedShader } from \"./DiffuseAnimatedTextureChunkedShader\";\r\n\r\nexport class DiffuseAnimatedTextureChunkedColoredShader extends DiffuseAnimatedTextureChunkedShader {\r\n    // Uniforms are of type `WebGLUniformLocation`\r\n    uColor: WebGLUniformLocation | undefined;\r\n\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode =  \"#version 300 es\\n\" +\r\n            \"precision mediump float;\\n\" +\r\n            \"in vec2 vTextureCoord;\\n\" +\r\n            \"uniform sampler2D sTexture;\\n\" +\r\n            \"uniform vec4 uColor;\\n\" +\r\n            \"out vec4 fragColor;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  fragColor = uColor * texture(sTexture, vTextureCoord);\\n\" +\r\n            \"}\";        \r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n        this.uColor = this.getUniform(\"uColor\");\r\n    }\r\n}\r\n","import { DiffuseShader, FullModel } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\nimport { DiffuseColoredShader } from \"./DiffuseColoredShader\";\r\n\r\nexport class SkyShader extends DiffuseColoredShader {\r\n    // Uniforms are of type `WebGLUniformLocation`\r\n    sDisplacement: WebGLUniformLocation | undefined;\r\n    uTime: WebGLUniformLocation | undefined;\r\n    uLightning: WebGLUniformLocation | undefined;\r\n    uLightningExponent: WebGLUniformLocation | undefined;\r\n    // Attributes are numbers.\r\n\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.vertexShaderCode = `uniform mat4 view_proj_matrix;\r\n            attribute vec4 rm_Vertex;\r\n            attribute vec2 rm_TexCoord0;\r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vTextureCoordDisplacement;\r\n            uniform float uTime;\r\n            \r\n            void main() {\r\n                gl_Position = view_proj_matrix * rm_Vertex;\r\n                vTextureCoord = rm_TexCoord0;\r\n                // vTextureCoordDisplacement = rm_TexCoord0 * 0.35 + vec2(uTime, uTime);\r\n                vTextureCoordDisplacement = rm_TexCoord0 + vec2(uTime, uTime);\r\n            }`;\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vTextureCoordDisplacement;\r\n            uniform sampler2D sTexture;\r\n            uniform sampler2D sDisplacement;\r\n            uniform vec4 color;\r\n            uniform float uLightning;\r\n            uniform vec4 uLightningExponent;\r\n\r\n            void main() {\r\n                vec2 offset = texture2D(sDisplacement, vTextureCoordDisplacement).xz * 0.025;\r\n                vec2 texCoord = vTextureCoord + offset;\r\n                vec4 grayscale = vec4(texture2D(sTexture, texCoord).rrr, 1.0);\r\n                grayscale += pow(grayscale, uLightningExponent) * uLightning;\r\n                gl_FragColor = grayscale * color;\r\n            }`;\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        super.fillUniformsAttributes();\r\n        this.sDisplacement = this.getUniform(\"sDisplacement\");\r\n        this.uTime = this.getUniform(\"uTime\");\r\n        this.uLightning = this.getUniform(\"uLightning\");\r\n        this.uLightningExponent = this.getUniform(\"uLightningExponent\");\r\n    }\r\n\r\n    drawModel(renderer: RendererWithExposedMethods, model: FullModel, tx: number, ty: number, tz: number, rx: number, ry: number, rz: number, sx: number, sy: number, sz: number): void {\r\n        if (this.rm_Vertex === undefined || this.view_proj_matrix === undefined || this.color === undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl;\r\n        gl.uniform4f(this.color, this._color[0], this._color[1], this._color[2], this._color[3]);\r\n\r\n        super.drawModel(renderer, model, tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n    }\r\n}\r\n","import { DiffuseShader } from \"webgl-framework\";\r\nimport { DrawableShader } from \"webgl-framework/dist/types/DrawableShader\";\r\n\r\nexport class DiffuseOneChannelShader extends DiffuseShader implements DrawableShader {\r\n    fillCode() {\r\n        super.fillCode();\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec2 vTextureCoord;\r\n            uniform sampler2D sTexture;\r\n\r\n            void main() {\r\n                float color = texture2D(sTexture, vTextureCoord).r;\r\n                gl_FragColor = vec4(color, color, color, 1.0);\r\n            }`;\r\n    }\r\n}\r\n","import { BaseShader, FullModel } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\nimport { IAnimatedTextureChunkedShader } from \"./IAnimatedTextureChunkedShader\";\r\n\r\nexport class DepthAnimatedTextureChunkedShader extends BaseShader implements IAnimatedTextureChunkedShader {\r\n    // Uniforms are of type `WebGLUniformLocation`\r\n    view_proj_matrix: WebGLUniformLocation | undefined;\r\n    uTexelHeight: WebGLUniformLocation | undefined;\r\n    uTextureWidthInt: WebGLUniformLocation | undefined;\r\n    sPositions: WebGLUniformLocation | undefined;\r\n    uTexelSizes: WebGLUniformLocation | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = \"#version 300 es\\n\" +\r\n            \"precision highp float;\\n\" +\r\n            \"uniform sampler2D sPositions;\\n\" +\r\n            \"// x = texture width; y = texel half width; z = sampler y coord (animation frame); w = chunk size\\n\" +\r\n            \"uniform vec4 uTexelSizes;\\n\" +\r\n            \"uniform float uTexelHeight;\\n\" +\r\n            \"uniform int uTextureWidthInt;\\n\" +\r\n            \"uniform mat4 view_proj_matrix;\\n\" +\r\n            \"\\n\" +\r\n            \"float getCenter(float y) {\\n\" +\r\n            \"  return y - mod(y, uTexelHeight) + uTexelHeight * 0.5;\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"vec4 linearFilter(vec2 coords) {\\n\" +\r\n            \"  vec2 coords1 = vec2(coords.x, coords.y - uTexelHeight * 0.49);\\n\" +\r\n            \"  vec2 coords2 = vec2(coords.x, coords.y + uTexelHeight * 0.49);\\n\" +\r\n            \"  float center1 = getCenter(coords1.y);\\n\" +\r\n            \"  float center2 = getCenter(coords2.y);\\n\" +\r\n            \"  vec4 v1 = texture(sPositions, vec2(coords1.x, center1));\\n\" +\r\n            \"  vec4 v2 = texture(sPositions, vec2(coords2.x, center2));\\n\" +\r\n            \"  float d1 = abs(coords.y - center1);\\n\" +\r\n            \"  float d2 = abs(coords.y - center2);\\n\" +\r\n            \"  if (d1 > d2) {\\n\" +\r\n            \"    return mix( v1, v2, d1 / (uTexelHeight) );\\n\" +\r\n            \"  } else {\\n\" +\r\n            \"    return mix( v2, v1, d2 / (uTexelHeight) );\\n\" +\r\n            \"  }\\n\" +\r\n            \"}\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  float id = float(gl_VertexID % uTextureWidthInt);\" +\r\n            \"  float chunk = float(gl_VertexID / uTextureWidthInt);\" +\r\n            \"  vec2 coords = vec2(id / uTexelSizes.x + uTexelSizes.y, uTexelSizes.z);\" +\r\n            \"  coords.y += chunk * uTexelSizes.w;\" +\r\n            \"  vec4 position = linearFilter(coords);\" +\r\n            \"  gl_Position = view_proj_matrix * position;\\n\" +\r\n            \"}\";\r\n\r\n        this.fragmentShaderCode = \"#version 300 es\\n\" +\r\n            \"precision mediump float;\\n\" +\r\n            \"out vec4 fragColor;\\n\" +\r\n            \"\\n\" +\r\n            \"void main() {\\n\" +\r\n            \"  fragColor = vec4(0.0, 1.0, 0.0, 1.0);\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        this.view_proj_matrix = this.getUniform('view_proj_matrix');\r\n        this.uTextureWidthInt = this.getUniform(\"uTextureWidthInt\");\r\n        this.uTexelHeight = this.getUniform(\"uTexelHeight\");\r\n        this.sPositions = this.getUniform(\"sPositions\");\r\n        this.uTexelSizes = this.getUniform(\"uTexelSizes\");\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    drawModel(\r\n        renderer: RendererWithExposedMethods,\r\n        model: FullModel,\r\n        tx: number, ty: number, tz: number,\r\n        rx: number, ry: number, rz: number,\r\n        sx: number, sy: number, sz: number\r\n    ): void {\r\n        if (this.view_proj_matrix === undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl as WebGL2RenderingContext;\r\n\r\n        model.bindBuffers(gl);\r\n\r\n        renderer.calculateMVPMatrix(tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n\r\n        gl.uniformMatrix4fv(this.view_proj_matrix, false, renderer.getMVPMatrix());\r\n        gl.drawElements(gl.TRIANGLES, model.getNumIndices() * 3, gl.UNSIGNED_SHORT, 0);\r\n\r\n        renderer.checkGlError(\"DiffuseShader glDrawElements\");\r\n    }\r\n}\r\n","import { BaseShader, FullModel } from \"webgl-framework\";\r\nimport { RendererWithExposedMethods } from \"webgl-framework/dist/types/RendererWithExposedMethods\";\r\n\r\nexport class VertexVignetteShader extends BaseShader {\r\n    view_proj_matrix: WebGLUniformLocation | undefined;\r\n    color0: WebGLUniformLocation | undefined;\r\n    color1: WebGLUniformLocation | undefined;\r\n    rm_Vertex: number | undefined;\r\n    rm_AO: number | undefined;\r\n\r\n    fillCode() {\r\n        this.vertexShaderCode = `uniform mat4 view_proj_matrix;\r\n            attribute vec4 rm_Vertex;\r\n            attribute mediump float aAO;\r\n\r\n            uniform mediump vec4 color0;\r\n            uniform mediump vec4 color1;\r\n            varying mediump vec4 vAO;\r\n\r\n            void main() {\r\n              gl_Position = view_proj_matrix * rm_Vertex;\r\n              vAO = mix(color0, color1, aAO);\r\n            }`;\r\n\r\n        this.fragmentShaderCode = `precision mediump float;\r\n            varying vec4 vAO;\r\n\r\n            const float MIN = 0.0;\r\n            const float MAX = 1.0;\r\n\r\n            void main() {\r\n              gl_FragColor = smoothstep(MIN, MAX, vAO);\r\n            }`;\r\n    }\r\n\r\n    fillUniformsAttributes() {\r\n        this.view_proj_matrix = this.getUniform(\"view_proj_matrix\");\r\n        this.color0 = this.getUniform(\"color0\");\r\n        this.color1 = this.getUniform(\"color1\");\r\n        this.rm_Vertex = this.getAttrib(\"rm_Vertex\");\r\n        this.rm_AO = this.getAttrib(\"aAO\");\r\n    }\r\n\r\n\r\n    drawVignette(renderer: RendererWithExposedMethods, model: FullModel): void {\r\n        if (this.rm_Vertex === undefined || this.rm_AO === undefined || this.view_proj_matrix === undefined) {\r\n            return;\r\n        }\r\n\r\n        const gl = renderer.gl as WebGL2RenderingContext;\r\n\r\n        model.bindBuffers(gl);\r\n\r\n        gl.enableVertexAttribArray(this.rm_Vertex);\r\n        gl.enableVertexAttribArray(this.rm_AO);\r\n\r\n        gl.vertexAttribPointer(this.rm_Vertex, 3, gl.HALF_FLOAT, false, 8, 0);\r\n        gl.vertexAttribPointer(this.rm_AO, 1, gl.UNSIGNED_BYTE, true, 8, 6);\r\n\r\n        gl.uniformMatrix4fv(this.view_proj_matrix, false, renderer.getOrthoMatrix());\r\n        gl.drawElements(gl.TRIANGLES, model.getNumIndices() * 3, gl.UNSIGNED_SHORT, 0);\r\n\r\n        renderer.checkGlError(\"VertexVignetteShader glDrawElements\");\r\n    }\r\n}\r\n","import { BaseRenderer, FullModel, UncompressedTextureLoader, DiffuseShader, CombinedAnimation, FrameBuffer, TextureUtils } from \"webgl-framework\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\nimport { DiffuseColoredShader } from \"./shaders/DiffuseColoredShader\";\r\nimport { BendShader } from \"./shaders/BendShader\";\r\nimport { CameraMode } from \"./CameraMode\";\r\nimport { CameraPositionInterpolator } from \"./CameraPositionInterpolator\";\r\nimport { DiffuseAlphaShader } from \"./shaders/DiffuseAlphaShader\";\r\nimport { DiffuseAnimatedTextureShader } from \"./shaders/DiffuseAnimatedTextureShader\";\r\nimport { DiffuseAnimatedTextureChunkedShader } from \"./shaders/DiffuseAnimatedTextureChunkedShader\";\r\nimport { TextureAnimationChunked } from \"./TextureAnimationChunked\";\r\nimport { PointSpriteColoredShader } from \"./shaders/PointSpriteColoredShader\";\r\nimport { AtAnimatedTextureChunkedShader } from \"./shaders/AtAnimatedTextureChunkedShader\";\r\nimport { LitAnimatedTextureChunkedShader } from \"./shaders/LitAnimatedTextureChunkedShader\";\r\nimport { SoftDiffuseColoredShader } from \"./shaders/SoftDiffuseColoredShader\";\r\nimport { SoftDiffuseColoredAlphaShader } from \"./shaders/SoftDiffuseColoredAlphaShader\";\r\nimport { DiffuseAnimatedTextureChunkedColoredShader } from \"./shaders/DiffuseAnimatedTextureChunkedColoredShader\";\r\nimport { SkyShader } from \"./shaders/SkyShader\";\r\nimport { DiffuseOneChannelShader } from \"./shaders/DiffuseOneChannelShader\";\r\nimport { IAnimatedTextureChunkedShader } from \"./shaders/IAnimatedTextureChunkedShader\";\r\nimport { DepthAnimatedTextureChunkedShader } from \"./shaders/DepthAnimatedTextureChunkedShader\";\r\nimport { VertexVignetteShader } from \"./shaders/VertexVignetteShader\";\r\n\r\nconst FOV_LANDSCAPE = 60.0; // FOV for landscape\r\nconst FOV_PORTRAIT = 80.0; // FOV for portrait\r\nconst YAW_COEFF_NORMAL = 200.0; // camera rotation time\r\n\r\nexport type AnimationType = \"idle1\" | \"idle2\" | \"fly\" | \"fly-fast\";\r\n\r\nconst particlesCoordinates = [\r\n    [0, 0, 0],\r\n\r\n    [0, 1, 0],\r\n    [0, -1, 0],\r\n    [1, 0, 0],\r\n    [-1, 0, 0],\r\n\r\n    [0, 1.2, 0],\r\n    [0, -1.2, 0],\r\n    [1.2, 0, 0],\r\n    [-1.2, 0, 0],\r\n\r\n    [0, -6, 0],\r\n    [2, -5, 0],\r\n    [-2, -5, 0],\r\n];\r\n\r\nexport class Renderer extends BaseRenderer {\r\n    private lastTime = 0;\r\n    private angleYaw = 0;\r\n\r\n    private loaded = false;\r\n\r\n    private fmSky = new FullModel();\r\n    private fmStripe = new FullModel();\r\n    private fmDust = new FullModel();\r\n\r\n    private fmBody = new FullModel();\r\n    private fmScythe = new FullModel();\r\n    private fmCloth = new FullModel();\r\n    private fmEyes = new FullModel();\r\n    private fmSmoke = new FullModel();\r\n    private fmVignette = new FullModel();\r\n\r\n    private textureSky: WebGLTexture | undefined;\r\n    private textureParticle: WebGLTexture | undefined;\r\n    private textureDisplacement: WebGLTexture | undefined;\r\n    private textureDust: WebGLTexture | undefined;\r\n    private textureSmoke: WebGLTexture | undefined;\r\n\r\n    private textureBody: WebGLTexture | undefined;\r\n    private textureCloth: WebGLTexture | undefined;\r\n    private textureEyes: WebGLTexture | undefined;\r\n    private textureBodyAnim: WebGLTexture | undefined;\r\n    private textureBodyNormalsAnim: WebGLTexture | undefined;\r\n    private textureScytheAnim: WebGLTexture | undefined;\r\n    private textureScytheNormalsAnim: WebGLTexture | undefined;\r\n    private textureClothAnim: WebGLTexture | undefined;\r\n    private textureEyesAnim: WebGLTexture | undefined;\r\n    private textureVignette: WebGLTexture | undefined;\r\n\r\n    private shaderDiffuse: DiffuseShader | undefined;\r\n    private shaderDiffuseOneChannel: DiffuseOneChannelShader | undefined;\r\n    private shaderDiffuseAnimatedTexture: DiffuseAnimatedTextureShader | undefined;\r\n    private shaderDiffuseAnimatedTextureChunked: DiffuseAnimatedTextureChunkedShader | undefined;\r\n    private shaderDiffuseAnimatedTextureChunkedColored: DiffuseAnimatedTextureChunkedColoredShader | undefined;\r\n    private shaderLitAnimatedTextureChunked: LitAnimatedTextureChunkedShader | undefined;\r\n    private shaderAtAnimatedTextureChunked: AtAnimatedTextureChunkedShader | undefined;\r\n    private shaderDiffuseAlpha: DiffuseAlphaShader | undefined;\r\n    private shaderDiffuseColored: DiffuseColoredShader | undefined;\r\n    private shaderBend: BendShader | undefined;\r\n    private shaderPointSpriteColored: PointSpriteColoredShader | undefined;\r\n    private shaderSoftDiffuseColored: SoftDiffuseColoredShader | undefined;\r\n    private shaderSoftDiffuseColoredAlpha: SoftDiffuseColoredAlphaShader | undefined;\r\n    private shaderSky: SkyShader | undefined;\r\n    private shaderDepthAnimated: DepthAnimatedTextureChunkedShader | undefined;\r\n    private shaderVignette: VertexVignetteShader | undefined;\r\n\r\n    private textureOffscreenColor: WebGLTexture | undefined\r\n    private textureOffscreenDepth: WebGLTexture | undefined;\r\n    private fboOffscreen: FrameBuffer | undefined;\r\n\r\n    private mQuadTriangles: Float32Array | undefined;\r\n    private mTriangleVerticesVignette: WebGLBuffer | undefined;\r\n\r\n    private customCamera: mat4 | undefined;\r\n\r\n    private Z_NEAR = 1.0;\r\n    private Z_FAR = 110.0;\r\n\r\n    private timerDustRotation = 0;\r\n    private DUST_ROTATION_SPEED = 18003333;\r\n    private timerDustFlickering = 0;\r\n    private DUST_FLICKERING_SPEED = 2100;\r\n\r\n    private timerCharacterAnimation = 0;\r\n    private REAPER_ANIMATION_PERIOD = 5000;\r\n    private timerSkyAnimation = 0;\r\n    private SKY_ANIMATION_PERIOD = 90000;\r\n    private timerSmokeMovement = 0;\r\n    private SMOKE_MOVEMENT_PERIOD = 8000;\r\n    private timerSmokeRotation = 0;\r\n    private SMOKE_ROTATION_PERIOD = 903333;\r\n    private timerSkyRotation = 0;\r\n    private SKY_ROTATION_PERIOD = 350333;\r\n    private timerGhostsRotation = 0;\r\n    private GHOSTS_ROTATION_PERIOD = 4200;\r\n    private timerGhostsRotation2 = 0;\r\n    private GHOSTS_ROTATION_PERIOD2 = 4100;\r\n    private timerEyes = 0;\r\n    private EYES_PERIOD = 2500;\r\n    private timerLightning = 0;\r\n    private LIGHTNING_PERIOD = 3500;\r\n\r\n    private SMOKE_SOFTNESS = 0.01;\r\n    private SMOKE_SCALE = 0.09;\r\n    private SMOKE_TRAVEL_Z = 16.0;\r\n\r\n    private readonly ANIMATION_TEXTURE_WIDTH = 1000;\r\n    private readonly REAPER_ANIMATION_TEXTURE_WIDTH = 512;\r\n\r\n    private animationsBody: { [key in AnimationType]: TextureAnimationChunked } = {\r\n        \"idle1\": new TextureAnimationChunked(this.REAPER_ANIMATION_TEXTURE_WIDTH, 2535, 51),\r\n        \"idle2\": new TextureAnimationChunked(this.REAPER_ANIMATION_TEXTURE_WIDTH, 2535, 51),\r\n        \"fly\": new TextureAnimationChunked(this.REAPER_ANIMATION_TEXTURE_WIDTH, 2535, 21),\r\n        \"fly-fast\": new TextureAnimationChunked(this.REAPER_ANIMATION_TEXTURE_WIDTH, 2535, 16)\r\n    };\r\n    private animationsScythe: { [key in AnimationType]: TextureAnimationChunked } = {\r\n        \"idle1\": new TextureAnimationChunked(608, 608, 51),\r\n        \"idle2\": new TextureAnimationChunked(608, 608, 51),\r\n        \"fly\": new TextureAnimationChunked(608, 608, 21),\r\n        \"fly-fast\": new TextureAnimationChunked(608, 608, 16)\r\n    };\r\n    private animationsEyes: { [key in AnimationType]: TextureAnimationChunked } = {\r\n        \"idle1\": new TextureAnimationChunked(36, 36, 51),\r\n        \"idle2\": new TextureAnimationChunked(36, 36, 51),\r\n        \"fly\": new TextureAnimationChunked(36, 36, 21),\r\n        \"fly-fast\": new TextureAnimationChunked(36, 36, 16)\r\n    };\r\n    private animationsCloth: { [key in AnimationType]: TextureAnimationChunked } = {\r\n        \"idle1\": new TextureAnimationChunked(664, 664, 51),\r\n        \"idle2\": new TextureAnimationChunked(664, 664, 51),\r\n        \"fly\": new TextureAnimationChunked(664, 664, 21),\r\n        \"fly-fast\": new TextureAnimationChunked(664, 664, 16)\r\n    };\r\n\r\n    private currentAnimation: AnimationType = \"idle1\";\r\n\r\n    private cameraMode = CameraMode.Random;\r\n    private currentRandomCamera = 0;\r\n\r\n    protected matViewInverted = mat4.create();\r\n    protected matViewInvertedTransposed = mat4.create();\r\n    protected matTemp = mat4.create();\r\n    protected cameraPosition = vec3.create();\r\n    protected cameraRotation = vec3.create();\r\n\r\n    private CAMERAS = [\r\n        {\r\n            start: {\r\n                position: new Float32Array([20.63134765625, 0.04024043679237366, -23.309953689575195]),\r\n                rotation: new Float32Array([-1.037999153137207, 4.560023307800293, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([20.027006149291992, 5.342957019805908, 30.2779598236084]),\r\n                rotation: new Float32Array([0.6720000505447388, 4.404022216796875, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-6.6900529861450195, 4.612008094787598, 50.24580383300781]),\r\n                rotation: new Float32Array([1.3187947273254395, 2.190007209777832, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-32.61750030517578, 24.84134292602539, 4.696905612945557]),\r\n                rotation: new Float32Array([-0.23520641028881073, 2.2440075874328613, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([32.16560745239258, -19.801870346069336, 10.339131355285645]),\r\n                rotation: new Float32Array([0.012000114656984806, -1, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-31.443674087524414, -25.470523834228516, 33.82668685913086]),\r\n                rotation: new Float32Array([0.5040005445480347, 0.9528526067733765, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([34.4621467590332, 25.997318267822266, 16.80156135559082]),\r\n                rotation: new Float32Array([0.17399989068508148, 4.0560197830200195, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-32.87525177001953, 22.77642250061035, 20.858415603637695]),\r\n                rotation: new Float32Array([0.21599987149238586, 2.2020068168640137, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-13.161895751953125,6.17222785949707,27.73927879333496]),\r\n                rotation: new Float32Array([0.5700000524520874,2.0220019817352295,0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-17.9815673828125,4.7135090827941895,-0.5088852643966675]),\r\n                rotation: new Float32Array([-0.5280001759529114,1.8480011224746704,0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([16.19297218322754,-4.055665493011475,25.375]),\r\n                rotation: new Float32Array([0.5220006108283997,4.746006488800049,0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([13.601936340332031,14.41900634765625,1.7308120727539062]),\r\n                rotation: new Float32Array([-0.47400006651878357,3.803999900817871,0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-8.11626148223877,6.703431129455566,27.8272705078125]),\r\n                rotation: new Float32Array([0.5640001893043518,2.082002878189087,0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-15.641282081604004,10.945764541625977,9.242594718933105]),\r\n                rotation: new Float32Array([-0.2639997899532318,2.0340025424957275,0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-6.933125972747803, 12.842277526855469, 17.02661895751953]),\r\n                rotation: new Float32Array([-0.04200000315904617, 2.8091883659362793, 0.3])\r\n            },\r\n            end: {\r\n                position: new Float32Array([6.7748637199401855, 14.75560474395752, 7.144927024841309]),\r\n                rotation: new Float32Array([-0.39600011706352234, 3.5771920680999756, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-0.5569624304771423, 8.056137084960938, 13.825691223144531]),\r\n                rotation: new Float32Array([-0.6540009379386902, 2.7420051097869873, 0.1])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-0.5569624304771423, 8.056137084960938, 13.825691223144531]),\r\n                rotation: new Float32Array([-0.07200095057487488, 3.1740081310272217, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([7.284486293792725, 12.943374633789062, 15.877676963806152]),\r\n                rotation: new Float32Array([0.04800054058432579, 3.660011053085327, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-6.318485736846924, 13.09317684173584, 10.776239395141602]),\r\n                rotation: new Float32Array([-0.16799943149089813, 2.6160080432891846, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([29.924358367919922, -20.450387954711914, 2.7626044750213623]),\r\n                rotation: new Float32Array([-0.19199976325035095, 5.320858955383301, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([11.117116928100586, 20.80797004699707, 33.48508834838867]),\r\n                rotation: new Float32Array([0.708000123500824, 3.538848400115967, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([5.5241804122924805, 11.871227264404297, 12.655675888061523]),\r\n                rotation: new Float32Array([-0.26999998092651367, 3.264004707336426, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-7.568962574005127, 10.686423301696777, 15.796873092651367]),\r\n                rotation: new Float32Array([0.0599999763071537, 2.393998622894287, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-2.939835786819458, 9.555854797363281, 12.755476951599121]),\r\n                rotation: new Float32Array([-0.35400035977363586, 2.7383251190185547, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-15.307744026184082, 38.544288635253906, 1.1079256534576416]),\r\n                rotation: new Float32Array([-0.35400035977363586, 2.7383251190185547, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([8.92319107055664, 17.87936019897461, 20.506385803222656]),\r\n                rotation: new Float32Array([0.2940000295639038, 3.4799962043762207, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([22.2241268157959, -3.5090885162353516, 8.84290885925293]),\r\n                rotation: new Float32Array([-0.14999999105930328, 4.853999614715576, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-12.525442123413086, 13.192499160766602, 23.48917007446289]),\r\n                rotation: new Float32Array([0.4800003468990326, 2.070006847381592, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-20.888025283813477, -13.184157371520996, 6.709957122802734]),\r\n                rotation: new Float32Array([-0.1259997934103012, 1.068004846572876, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([-1.4070744514465332, 10.23020076751709, 21.719236373901367]),\r\n                rotation: new Float32Array([0.7260005474090576, 3.0300018787384033, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-2.625640869140625, 21.179767608642578, -2.4872467517852783]),\r\n                rotation: new Float32Array([-0.5999994874000549, 3.0300018787384033, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        {\r\n            start: {\r\n                position: new Float32Array([13.535038948059082, 7.506402015686035, 24.7524356842041]),\r\n                rotation: new Float32Array([0.40200015902519226, 3.7320029735565186, 0])\r\n            },\r\n            end: {\r\n                position: new Float32Array([-8.367344856262207, 15.256627082824707, 9.666288375854492]),\r\n                rotation: new Float32Array([-0.34200000762939453, 2.724001407623291, 0])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n    ];\r\n\r\n    private readonly CAMERA_SPEED = 0.01;\r\n    private readonly CAMERA_MIN_DURATION = 8000;\r\n\r\n    private cameraPositionInterpolator = new CameraPositionInterpolator();\r\n\r\n    private readonly SCALE = 10;\r\n\r\n    private dustSpriteSize = 0;\r\n    private DUST_COLOR = { r: 10 / 256, g: 10 / 256, b: 10 / 256, a: 1 };\r\n    private DUST_SPRITE_SIZE = 0.006;\r\n    private DUST_SCALE = 0.16;\r\n\r\n    private lightningDirection = vec3.create();\r\n\r\n    private readonly PRESETS = [\r\n        { // green\r\n            bodySuffix: \"green\",\r\n            clothSuffix: \"green\",\r\n            colorEyes: { r: 0.1, g: 0.8, b: 0.1, a: 1 },\r\n            colorSky: { r: 0.38, g:0.60, b:0.4, a: 1 },\r\n            colorSmoke: { r: 0.2, g: 0.5, b: 0.25, a: 0.35 }\r\n        },\r\n        { // crimson\r\n            bodySuffix: \"red\",\r\n            clothSuffix: \"red\",\r\n            colorEyes: { r: 0.6, g: 0.1, b: 0.1, a: 1 },\r\n            colorSky: { r: 0.65, g:0.35, b:0.32, a: 1 },\r\n            colorSmoke: { r: 0.17, g: 0.22, b: 0.25, a: 0.8 }\r\n        },\r\n        { // winter\r\n            bodySuffix: \"white\",\r\n            clothSuffix: \"blue\",\r\n            colorEyes: { r: 0.13, g: 0.13, b: 0.9, a: 1 },\r\n            colorSky: { r: 0.51, g: 0.72, b: 0.9, a: 1 },\r\n            colorSmoke: { r: 0.8, g: 0.9, b: 0.99, a: 0.25 }\r\n        },\r\n        { // yellow\r\n            bodySuffix: \"brown\",\r\n            clothSuffix: \"yellow\",\r\n            colorEyes: { r: 0.7, g: 0.6, b: 0.4, a: 1 }, // brown\r\n            colorSky: { r: 0.95, g: 0.9, b: 0.53, a: 1 }, // yellow\r\n            colorSmoke: { r: 0.6, g: 0.6, b: 0.2, a: 0.3 }\r\n        },\r\n        { // brown\r\n            bodySuffix: \"brown\",\r\n            clothSuffix: \"brown\",\r\n            colorEyes: { r: 0.7, g: 0.6, b: 0.4, a: 1 }, // brown\r\n            colorSky: { r: 0.72, g: 0.7, b: 0.43, a: 1 }, // yellow\r\n            colorSmoke: { r: 0.17, g: 0.22, b: 0.25, a: 0.8 }\r\n        }\r\n    ];\r\n    private readonly PRESET = this.PRESETS[4];\r\n\r\n    private useLightning = true;\r\n\r\n    set lightning(value: boolean) {\r\n        this.useLightning = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.cameraPositionInterpolator.speed = this.CAMERA_SPEED;\r\n        this.cameraPositionInterpolator.minDuration = this.CAMERA_MIN_DURATION;\r\n        this.randomizeCamera();\r\n\r\n        document.addEventListener(\"keypress\", event => {\r\n            if (event.key === \"1\") {\r\n                this.CAMERAS[0].start = {\r\n                    position: new Float32Array([this.cameraPosition[0], this.cameraPosition[1], this.cameraPosition[2]]),\r\n                    rotation: new Float32Array([this.cameraRotation[0], this.cameraRotation[1], this.cameraRotation[2]]),\r\n                }\r\n                this.logCamera();\r\n            } else if (event.key === \"2\") {\r\n                this.CAMERAS[0].end = {\r\n                    position: new Float32Array([this.cameraPosition[0], this.cameraPosition[1], this.cameraPosition[2]]),\r\n                    rotation: new Float32Array([this.cameraRotation[0], this.cameraRotation[1], this.cameraRotation[2]]),\r\n                }\r\n                this.logCamera();\r\n            }\r\n        });\r\n\r\n        this.randomizeLightning();\r\n    }\r\n\r\n    private logCamera() {\r\n        const camera = this.CAMERAS[0];\r\n        console.log(`\r\n        {\r\n            start: {\r\n                position: new Float32Array([${camera.start.position.toString()}]),\r\n                rotation: new Float32Array([${camera.start.rotation.toString()}])\r\n            },\r\n            end: {\r\n                position: new Float32Array([${camera.end.position.toString()}]),\r\n                rotation: new Float32Array([${camera.end.rotation.toString()}])\r\n            },\r\n            speedMultiplier: 1.0\r\n        },\r\n        `);\r\n    }\r\n\r\n    setCustomCamera(camera: mat4 | undefined, position?: vec3, rotation?: vec3) {\r\n        this.customCamera = camera;\r\n\r\n        if (position !== undefined) {\r\n            this.cameraPosition = position;\r\n        }\r\n        if (rotation !== undefined) {\r\n            this.cameraRotation = rotation;\r\n        }\r\n    }\r\n\r\n    resetCustomCamera() {\r\n        this.customCamera = undefined;\r\n    }\r\n\r\n    onBeforeInit(): void {\r\n    }\r\n\r\n    onAfterInit(): void {\r\n    }\r\n\r\n    onInitError(): void {\r\n        document.getElementById(\"canvasGL\")?.classList.add(\"hidden\");\r\n        document.getElementById(\"alertError\")?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    initShaders(): void {\r\n        this.shaderDiffuse = new DiffuseShader(this.gl);\r\n        this.shaderDiffuseAnimatedTexture = new DiffuseAnimatedTextureShader(this.gl);\r\n        this.shaderDiffuseAnimatedTextureChunked = new DiffuseAnimatedTextureChunkedShader(this.gl);\r\n        this.shaderDiffuseAnimatedTextureChunkedColored = new DiffuseAnimatedTextureChunkedColoredShader(this.gl);\r\n        this.shaderAtAnimatedTextureChunked = new AtAnimatedTextureChunkedShader(this.gl);\r\n        this.shaderLitAnimatedTextureChunked = new LitAnimatedTextureChunkedShader(this.gl);\r\n        this.shaderDiffuseAlpha = new DiffuseAlphaShader(this.gl);\r\n        this.shaderDiffuseColored = new DiffuseColoredShader(this.gl);\r\n        this.shaderDiffuseOneChannel = new DiffuseOneChannelShader(this.gl);\r\n        this.shaderBend = new BendShader(this.gl);\r\n        this.shaderPointSpriteColored = new PointSpriteColoredShader(this.gl);\r\n        this.shaderSoftDiffuseColored = new SoftDiffuseColoredShader(this.gl);\r\n        this.shaderSoftDiffuseColoredAlpha = new SoftDiffuseColoredAlphaShader(this.gl);\r\n        this.shaderSky = new SkyShader(this.gl);\r\n        this.shaderDepthAnimated = new DepthAnimatedTextureChunkedShader(this.gl);\r\n        this.shaderVignette = new VertexVignetteShader(this.gl);\r\n    }\r\n\r\n    async loadFloatingPointTexture(\r\n        url: string,\r\n        gl: WebGL2RenderingContext,\r\n        width: number,\r\n        height: number,\r\n        minFilter: number | undefined = gl.LINEAR,\r\n        magFilter: number | undefined = gl.LINEAR,\r\n        clamp = false,\r\n        type: \"fp16\" | \"snorm8\" = \"fp16\"\r\n    ): Promise<WebGLTexture> {\r\n        const texture = gl.createTexture();\r\n\r\n        if (texture === null) {\r\n            throw new Error(\"Error creating WebGL texture\");\r\n        }\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.arrayBuffer();\r\n        const dataView = type === \"fp16\"\r\n            ? new Uint16Array(data)\r\n            : new Int8Array(data);\r\n        // const dataView = new Float32Array(data);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        this.checkGlError(\"loadFloatingPointTexture 0\");\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            type === \"fp16\" ? gl.RGB16F : gl.RGB8_SNORM,\r\n            width,\r\n            height,\r\n            0,\r\n            gl.RGB,\r\n            type === \"fp16\" ? gl.HALF_FLOAT : gl.BYTE,\r\n            dataView\r\n        );\r\n        this.checkGlError(\"loadFloatingPointTexture 1\");\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n        if (clamp === true) {\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        } else {\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n        }\r\n        this.checkGlError(\"loadFloatingPointTexture 2\");\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n        console.log(`Loaded texture ${url} [${width}x${height}]`);\r\n\r\n        return texture;\r\n    }\r\n\r\n    async loadData(): Promise<void> {\r\n        const promiseModels = Promise.all([\r\n            this.fmSky.load(\"data/models/sky\", this.gl),\r\n            this.fmStripe.load(\"data/models/stripe-optimized-1\", this.gl),\r\n            this.fmDust.load(\"data/models/particles_20\", this.gl),\r\n            this.fmBody.load(\"data/models/body\", this.gl),\r\n            this.fmScythe.load(\"data/models/scythe\", this.gl),\r\n            this.fmCloth.load(\"data/models/cloth\", this.gl),\r\n            this.fmEyes.load(\"data/models/eyes\", this.gl),\r\n            this.fmSmoke.load(\"data/models/smoke100\", this.gl),\r\n            this.fmVignette.load(\"data/models/vignette-round-vntao\", this.gl)\r\n        ]);\r\n\r\n        const promiseTextures = Promise.all([\r\n            UncompressedTextureLoader.load(\"data/textures/sky.webp\", this.gl, undefined, undefined, false),\r\n            UncompressedTextureLoader.load(\"data/textures/particle1.webp\", this.gl, undefined, undefined, false),\r\n            UncompressedTextureLoader.load(\"data/textures/displacement.webp\", this.gl, undefined, undefined, false),\r\n            UncompressedTextureLoader.load(\"data/textures/dust.webp\", this.gl, this.gl.LINEAR, this.gl.LINEAR, false),\r\n\r\n            UncompressedTextureLoader.load(`data/textures/body-${this.PRESET.bodySuffix}.webp`, this.gl, this.gl.LINEAR, this.gl.LINEAR, false),\r\n            UncompressedTextureLoader.load(`data/textures/cloth-${this.PRESET.clothSuffix}.webp`, this.gl, this.gl.LINEAR, this.gl.LINEAR, false),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/body-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsBody[this.currentAnimation].textureWidth, this.animationsBody[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/body-normals.rgb.s8`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsBody[this.currentAnimation].textureWidth, this.animationsBody[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"snorm8\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/scythe-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsScythe[this.currentAnimation].textureWidth, this.animationsScythe[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/scythe-normals.rgb.s8`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsScythe[this.currentAnimation].textureWidth, this.animationsScythe[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"snorm8\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/cloth-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsCloth[this.currentAnimation].textureWidth, this.animationsCloth[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/eyes.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsEyes[this.currentAnimation].textureWidth, this.animationsEyes[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            ),\r\n            UncompressedTextureLoader.load(\"data/textures/eye_alpha.webp\", this.gl),\r\n            UncompressedTextureLoader.load(\"data/textures/smoke.webp\", this.gl),\r\n            UncompressedTextureLoader.load(\"data/textures/vignette.webp\", this.gl)\r\n        ]);\r\n\r\n        const [models, textures] = await Promise.all([promiseModels, promiseTextures]);\r\n        [\r\n            this.textureSky,\r\n            this.textureParticle,\r\n            this.textureDisplacement,\r\n            this.textureDust,\r\n            this.textureBody,\r\n            this.textureCloth,\r\n            this.textureBodyAnim,\r\n            this.textureBodyNormalsAnim,\r\n            this.textureScytheAnim,\r\n            this.textureScytheNormalsAnim,\r\n            this.textureClothAnim,\r\n            this.textureEyesAnim,\r\n            this.textureEyes,\r\n            this.textureSmoke,\r\n            this.textureVignette\r\n        ] = textures;\r\n\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.textureBody);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);\r\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.textureCloth);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);\r\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n\r\n        this.initOffscreen();\r\n        this.initVignette();\r\n\r\n        this.loaded = true;\r\n        console.log(\"Loaded all assets\");\r\n\r\n        document.getElementById(\"message\")?.classList.add(\"hidden\");\r\n        document.getElementById(\"canvasGL\")?.classList.remove(\"transparent\");\r\n        setTimeout(() => document.querySelector(\".promo\")?.classList.remove(\"transparent\"), 1800);\r\n        setTimeout(() => document.querySelector(\"#toggleFullscreen\")?.classList.remove(\"transparent\"), 1800);\r\n    }\r\n\r\n    protected initOffscreen() {\r\n        if (this.canvas === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.textureOffscreenColor = TextureUtils.createNpotTexture(this.gl, this.canvas.width, this.canvas.height, false)!;\r\n        this.textureOffscreenDepth = TextureUtils.createDepthTexture(this.gl, this.canvas.width, this.canvas.height)!;\r\n        this.fboOffscreen = new FrameBuffer(this.gl);\r\n        this.fboOffscreen.textureHandle = this.textureOffscreenColor;\r\n        this.fboOffscreen.depthTextureHandle = this.textureOffscreenDepth;\r\n        this.fboOffscreen.width = this.canvas.width;\r\n        this.fboOffscreen.height = this.canvas.height;\r\n        this.fboOffscreen.createGLData(this.canvas.width, this.canvas.height);\r\n        this.checkGlError(\"offscreen FBO\");\r\n\r\n        console.log(\"Initialized offscreen FBO.\");\r\n    }\r\n\r\n    checkGlError(operation: string): void {\r\n        // In production code, override this to do nothing for better performance\r\n    }\r\n\r\n    private initVignette() {\r\n        mat4.ortho(this.matOrtho, -1, 1, -1, 1, 2.0, 250);\r\n\r\n        this.mQuadTriangles = new Float32Array([\r\n            // X, Y, Z, U, V\r\n            -1.0, -1.0, -5.0, 0.0, 0.0, // 0. left-bottom\r\n            1.0, -1.0, -5.0, 1.0, 0.0, // 1. right-bottom\r\n            -1.0, 1.0, -5.0, 0.0, 1.0, // 2. left-top\r\n            1.0, 1.0, -5.0, 1.0, 1.0, // 3. right-top\r\n        ]);\r\n        this.mTriangleVerticesVignette = this.gl.createBuffer()!;\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.mTriangleVerticesVignette);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.mQuadTriangles, this.gl.STATIC_DRAW);\r\n    }\r\n\r\n    async changeScene(): Promise<void> {\r\n        if (this.currentAnimation === \"idle1\") {\r\n            this.currentAnimation = \"idle2\";\r\n        } else if (this.currentAnimation === \"idle2\") {\r\n            this.currentAnimation = \"fly\";\r\n        } else if (this.currentAnimation === \"fly\") {\r\n            this.currentAnimation = \"fly-fast\";\r\n        } else if (this.currentAnimation === \"fly-fast\") {\r\n            this.currentAnimation = \"idle1\";\r\n        }\r\n\r\n        [\r\n            this.textureBodyAnim,\r\n            this.textureBodyNormalsAnim,\r\n            this.textureScytheAnim,\r\n            this.textureScytheNormalsAnim,\r\n            this.textureClothAnim,\r\n            this.textureEyesAnim,\r\n        ] = await Promise.all([\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/body-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsBody[this.currentAnimation].textureWidth, this.animationsBody[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"fp16\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/body-normals.rgb.s8`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsBody[this.currentAnimation].textureWidth, this.animationsBody[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"snorm8\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/scythe-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsScythe[this.currentAnimation].textureWidth, this.animationsScythe[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"fp16\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/scythe-normals.rgb.s8`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsScythe[this.currentAnimation].textureWidth, this.animationsScythe[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true,\r\n                \"snorm8\"\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/cloth-positions.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsCloth[this.currentAnimation].textureWidth, this.animationsCloth[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            ),\r\n            this.loadFloatingPointTexture(\r\n                `data/textures/anims/${this.currentAnimation}/eyes.rgb.fp16`,\r\n                this.gl as WebGL2RenderingContext,\r\n                this.animationsEyes[this.currentAnimation].textureWidth, this.animationsEyes[this.currentAnimation].textureHeight,\r\n                this.gl.NEAREST, this.gl.NEAREST,\r\n                true\r\n            )\r\n        ]);\r\n    }\r\n\r\n    animate(): void {\r\n        const timeNow = new Date().getTime();\r\n\r\n        if (this.lastTime != 0) {\r\n            const elapsed = timeNow - this.lastTime;\r\n\r\n            this.angleYaw += elapsed / YAW_COEFF_NORMAL;\r\n            this.angleYaw %= 360.0;\r\n\r\n            this.timerDustRotation = (timeNow % this.DUST_ROTATION_SPEED) / this.DUST_ROTATION_SPEED;\r\n            this.timerDustFlickering = (timeNow % this.DUST_FLICKERING_SPEED) / this.DUST_FLICKERING_SPEED;\r\n\r\n            const prevLightning = this.timerLightning;\r\n\r\n            this.timerCharacterAnimation = (timeNow % this.REAPER_ANIMATION_PERIOD) / this.REAPER_ANIMATION_PERIOD;\r\n            this.timerSkyAnimation = (timeNow % this.SKY_ANIMATION_PERIOD) / this.SKY_ANIMATION_PERIOD;\r\n            this.timerSmokeMovement = (timeNow % this.SMOKE_MOVEMENT_PERIOD) / this.SMOKE_MOVEMENT_PERIOD;\r\n            this.timerSmokeRotation = (timeNow % this.SMOKE_ROTATION_PERIOD) / this.SMOKE_ROTATION_PERIOD;\r\n            this.timerSkyRotation = (timeNow % this.SKY_ROTATION_PERIOD) / this.SKY_ROTATION_PERIOD;\r\n            this.timerGhostsRotation = (timeNow % this.GHOSTS_ROTATION_PERIOD) / this.GHOSTS_ROTATION_PERIOD;\r\n            this.timerGhostsRotation2 = (timeNow % this.GHOSTS_ROTATION_PERIOD2) / this.GHOSTS_ROTATION_PERIOD2;\r\n            this.timerEyes = (timeNow % this.EYES_PERIOD) / this.EYES_PERIOD;\r\n            if (this.useLightning) {\r\n                this.timerLightning = (timeNow % this.LIGHTNING_PERIOD) / this.LIGHTNING_PERIOD;\r\n            }\r\n\r\n            this.cameraPositionInterpolator.iterate(timeNow);\r\n            if (this.cameraPositionInterpolator.timer === 1.0) {\r\n                this.randomizeCamera();\r\n            }\r\n            if (this.timerLightning < prevLightning) {\r\n                this.randomizeLightning();\r\n            }\r\n        }\r\n\r\n        this.lastTime = timeNow;\r\n    }\r\n\r\n    /** Calculates projection matrix */\r\n    setCameraFOV(multiplier: number): void {\r\n        var ratio;\r\n\r\n        if (this.gl.canvas.height > 0) {\r\n            ratio = this.gl.canvas.width / this.gl.canvas.height;\r\n        } else {\r\n            ratio = 1.0;\r\n        }\r\n\r\n        let fov = 0;\r\n        if (this.gl.canvas.width >= this.gl.canvas.height) {\r\n            fov = FOV_LANDSCAPE * multiplier;\r\n        } else {\r\n            fov = FOV_PORTRAIT * multiplier;\r\n        }\r\n\r\n        this.setFOV(this.mProjMatrix, fov, ratio, this.Z_NEAR, this.Z_FAR);\r\n\r\n        this.dustSpriteSize = Math.min(this.gl.canvas.height, this.gl.canvas.width) * this.DUST_SPRITE_SIZE;\r\n    }\r\n\r\n    /**\r\n     * Calculates camera matrix.\r\n     *\r\n     * @param a Position in [0...1] range\r\n     */\r\n    private positionCamera(a: number) {\r\n        if (this.customCamera !== undefined) {\r\n            this.mVMatrix = this.customCamera;\r\n            return;\r\n        }\r\n\r\n        if (this.cameraMode === CameraMode.Random) {\r\n            this.mVMatrix = this.cameraPositionInterpolator.matrix;\r\n            this.cameraPosition[0] = this.cameraPositionInterpolator.cameraPosition[0];\r\n            this.cameraPosition[1] = this.cameraPositionInterpolator.cameraPosition[1];\r\n            this.cameraPosition[2] = this.cameraPositionInterpolator.cameraPosition[2];\r\n        } else {\r\n            const a = this.angleYaw / 360 * Math.PI * 2;\r\n            const sina = Math.sin(a);\r\n            const cosa = Math.cos(a);\r\n            const cosa2 = Math.cos(a * 2);\r\n\r\n            this.cameraPosition[0] = sina * 23;\r\n            this.cameraPosition[1] = cosa * 23;\r\n            this.cameraPosition[2] = 12 + cosa2 * 6;\r\n\r\n            mat4.lookAt(this.mVMatrix,\r\n                this.cameraPosition, // eye\r\n                [0, 0, 12], // center\r\n                [0, 0, 1] // up vector\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Issues actual draw calls */\r\n    drawScene() {\r\n        if (!this.loaded) {\r\n            return;\r\n        }\r\n\r\n        this.positionCamera(0.0);\r\n        this.setCameraFOV(1.0);\r\n\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n        this.gl.colorMask(false, false, false, false);\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fboOffscreen!.framebufferHandle);\r\n        this.gl.viewport(0, 0, this.fboOffscreen!.width!, this.fboOffscreen!.height!);\r\n        this.gl.depthMask(true);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n        this.drawDepthObjects();\r\n\r\n        this.gl.clearColor(0.5, 0.5, 0.5, 1.0);\r\n\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n\r\n        this.gl.colorMask(true, true, true, true);\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null); // This differs from OpenGL ES\r\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n\r\n        this.drawSceneObjects();\r\n        // this.drawTestDepth();\r\n    }\r\n\r\n    drawTestDepth() {\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.disable(this.gl.BLEND);\r\n\r\n        this.shaderDiffuse!.use();\r\n\r\n        this.setTexture2D(0, this.textureOffscreenDepth!, this.shaderDiffuse!.sTexture!);\r\n        this.drawVignette(this.shaderDiffuse!);\r\n    }\r\n\r\n    drawSceneVignette() {\r\n        this.shaderDiffuseOneChannel!.use();\r\n        this.setTexture2D(0, this.textureVignette!, this.shaderDiffuseOneChannel!.sTexture!);\r\n        this.drawVignette(this.shaderDiffuseOneChannel!);\r\n    }\r\n\r\n    drawVignetteObject() {\r\n        if (this.shaderVignette === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.shaderVignette.use();\r\n        this.gl.uniform4f(this.shaderVignette.color0!, 0.33, 0.33, 0.33, 1);\r\n        this.gl.uniform4f(this.shaderVignette.color1!, 1.0, 1.0, 1.0, 1);\r\n\r\n        this.shaderVignette.drawVignette(this, this.fmVignette);\r\n    }\r\n\r\n    drawVignette(shader: DiffuseShader) {\r\n        this.unbindBuffers();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.mTriangleVerticesVignette!);\r\n\r\n        this.gl.enableVertexAttribArray(shader.rm_Vertex!);\r\n        this.gl.vertexAttribPointer(shader.rm_Vertex!, 3, this.gl.FLOAT, false, 20, 0);\r\n        this.gl.enableVertexAttribArray(shader.rm_TexCoord0!);\r\n        this.gl.vertexAttribPointer(shader.rm_TexCoord0!, 2, this.gl.FLOAT, false, 20, 4 * 3);\r\n\r\n        this.gl.uniformMatrix4fv(shader.view_proj_matrix!, false, this.getOrthoMatrix());\r\n        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n\r\n    private drawDepthObjects(): void {\r\n        if (this.shaderDepthAnimated === undefined\r\n            || this.shaderDiffuseAnimatedTexture === undefined\r\n            || this.shaderDiffuseAnimatedTextureChunked === undefined\r\n            || this.shaderAtAnimatedTextureChunked === undefined\r\n            || this.shaderLitAnimatedTextureChunked === undefined\r\n            || this.shaderDiffuseColored === undefined\r\n            || this.shaderBend == undefined\r\n        ) {\r\n            console.log(\"undefined shaders\");\r\n            return;\r\n        }\r\n\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n\r\n        this.shaderDepthAnimated?.use();\r\n\r\n        this.drawAnimated(this.shaderDepthAnimated, this.timerCharacterAnimation, this.animationsBody[this.currentAnimation], this.fmBody, this.textureBodyAnim!, this.REAPER_ANIMATION_TEXTURE_WIDTH, \"animateStartToEnd\");\r\n        this.drawAnimated(this.shaderDepthAnimated, this.timerCharacterAnimation, this.animationsScythe[this.currentAnimation], this.fmScythe, this.textureScytheAnim!, 608, \"animateStartToEnd\");\r\n\r\n        this.gl.disable(this.gl.CULL_FACE);\r\n        this.shaderAtAnimatedTextureChunked.use();\r\n        this.setTexture2D(1, this.textureCloth!, this.shaderAtAnimatedTextureChunked.sTexture!);\r\n        this.drawAnimated(this.shaderAtAnimatedTextureChunked, this.timerCharacterAnimation, this.animationsCloth[this.currentAnimation], this.fmCloth, this.textureClothAnim!, 664, \"animateStartToEnd\");\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n    }\r\n\r\n    private drawSceneObjects(): void {\r\n        if (this.shaderDiffuse === undefined\r\n            || this.shaderDiffuseAlpha === undefined\r\n            || this.shaderDiffuseAnimatedTexture === undefined\r\n            || this.shaderDiffuseAnimatedTextureChunked === undefined\r\n            || this.shaderDiffuseAnimatedTextureChunkedColored === undefined\r\n            || this.shaderAtAnimatedTextureChunked === undefined\r\n            || this.shaderLitAnimatedTextureChunked === undefined\r\n            || this.shaderDiffuseColored === undefined\r\n            || this.shaderSoftDiffuseColored === undefined\r\n            || this.shaderSky === undefined\r\n            || this.shaderBend == undefined\r\n        ) {\r\n            console.log(\"undefined shaders\");\r\n            return;\r\n        }\r\n\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.disable(this.gl.BLEND);\r\n\r\n        const light = this.getLightningIntensity();\r\n\r\n        this.gl.disable(this.gl.CULL_FACE);\r\n        this.shaderAtAnimatedTextureChunked.use();\r\n        this.setTexture2D(1, this.textureCloth!, this.shaderAtAnimatedTextureChunked.sTexture!);\r\n        this.drawAnimated(this.shaderAtAnimatedTextureChunked, this.timerCharacterAnimation, this.animationsCloth[this.currentAnimation], this.fmCloth, this.textureClothAnim!, 664, \"animateStartToEnd\");\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n\r\n        this.shaderLitAnimatedTextureChunked.use();\r\n        if (light > 0) {\r\n            this.gl.uniform4f(\r\n                this.shaderLitAnimatedTextureChunked.uLightDir!,\r\n                this.lightningDirection[0],\r\n                this.lightningDirection[1],\r\n                this.lightningDirection[2],\r\n                0.0\r\n            );\r\n            this.gl.uniform4f(this.shaderLitAnimatedTextureChunked.uLightColor!, 1.0, 1.0, 1.0, 0.0);\r\n            this.gl.uniform1f(this.shaderLitAnimatedTextureChunked.uLightIntensity!, light);\r\n        } else {\r\n            this.gl.uniform4f(this.shaderLitAnimatedTextureChunked.uLightDir!, 0, 0, -1, 0);\r\n            this.gl.uniform4f(this.shaderLitAnimatedTextureChunked.uLightColor!, -1.0, -1.0, -1.0, 0.0);\r\n            this.gl.uniform1f(this.shaderLitAnimatedTextureChunked.uLightIntensity!, 0.7);\r\n        }\r\n\r\n        this.setTexture2D(1, this.textureBody!, this.shaderLitAnimatedTextureChunked.sTexture!);\r\n        this.setTexture2D(2, this.textureBodyNormalsAnim!, this.shaderLitAnimatedTextureChunked.sNormals!);\r\n        this.drawAnimated(this.shaderLitAnimatedTextureChunked, this.timerCharacterAnimation, this.animationsBody[this.currentAnimation], this.fmBody, this.textureBodyAnim!, this.REAPER_ANIMATION_TEXTURE_WIDTH, \"animateStartToEnd\");\r\n\r\n        this.setTexture2D(2, this.textureScytheNormalsAnim!, this.shaderLitAnimatedTextureChunked.sNormals!);\r\n        this.drawAnimated(this.shaderLitAnimatedTextureChunked, this.timerCharacterAnimation, this.animationsScythe[this.currentAnimation], this.fmScythe, this.textureScytheAnim!, 608, \"animateStartToEnd\");\r\n\r\n        this.gl.depthMask(false);\r\n        this.shaderDiffuseAnimatedTextureChunkedColored.use();\r\n        const eyesOpacity = this.getEyesOpacity();\r\n        this.gl.uniform4f(\r\n            this.shaderDiffuseAnimatedTextureChunkedColored.uColor!,\r\n            this.PRESET.colorEyes.r * eyesOpacity,\r\n            this.PRESET.colorEyes.g * eyesOpacity,\r\n            this.PRESET.colorEyes.b * eyesOpacity,\r\n            this.PRESET.colorEyes.a * eyesOpacity,\r\n        );\r\n        this.gl.disable(this.gl.CULL_FACE);\r\n        this.gl.enable(this.gl.BLEND);\r\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE);\r\n        this.setTexture2D(1, this.textureEyes!, this.shaderDiffuseAnimatedTextureChunkedColored.sTexture!);\r\n        this.drawAnimated(this.shaderDiffuseAnimatedTextureChunkedColored, this.timerCharacterAnimation, this.animationsEyes[this.currentAnimation], this.fmEyes, this.textureEyesAnim!, 36, \"animateStartToEnd\");\r\n        this.gl.disable(this.gl.BLEND);\r\n        this.gl.depthMask(true);\r\n\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n\r\n        // Sky is a distant object drawn one of the last, it doesn't add useful depth information.\r\n        // Reduce memory bandwidth by disabling writing to z-buffer.\r\n        this.gl.depthMask(false);\r\n\r\n        this.shaderSky.use();\r\n        this.setTexture2D(0, this.textureSky!, this.shaderSky.sTexture!);\r\n        this.setTexture2D(1, this.textureDisplacement!, this.shaderSky.sDisplacement!);\r\n        this.shaderSky.setColor(this.PRESET.colorSky.r, this.PRESET.colorSky.g, this.PRESET.colorSky.b, this.PRESET.colorSky.a);\r\n        this.gl.uniform1f(this.shaderSky.uTime!, this.timerSkyAnimation);\r\n        this.gl.uniform1f(this.shaderSky.uLightning!, light * 5);\r\n        this.gl.uniform4f(this.shaderSky.uLightningExponent!, 3.3, 3.3, 3.3, 3.3);\r\n        this.shaderSky.drawModel(\r\n            this, this.fmSky,\r\n            this.cameraPosition[0], this.cameraPosition[1], this.cameraPosition[2],\r\n            0, 0, this.timerSkyRotation * Math.PI * 2,\r\n            1, 1, 1\r\n        );\r\n\r\n        this.gl.enable(this.gl.BLEND);\r\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        this.drawParticles();\r\n        this.drawGhosts();\r\n\r\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE);\r\n        this.drawDust(light);\r\n\r\n        this.gl.blendFunc(this.gl.DST_COLOR, this.gl.SRC_COLOR);\r\n\r\n        this.gl.blendFunc(this.gl.ZERO, this.gl.SRC_COLOR);\r\n        this.drawVignetteObject();\r\n\r\n        this.gl.disable(this.gl.BLEND);\r\n        this.gl.depthMask(true);\r\n    }\r\n\r\n    private drawParticles(): void {\r\n        if (this.shaderSoftDiffuseColored === undefined || this.shaderSoftDiffuseColoredAlpha === undefined) {\r\n            console.log(\"undefined shaders\");\r\n            return;\r\n        }\r\n\r\n        this.shaderSoftDiffuseColoredAlpha.use();\r\n        this.initDepthReadShader(this.shaderSoftDiffuseColoredAlpha);\r\n        this.setTexture2D(0, this.textureSmoke!, this.shaderSoftDiffuseColoredAlpha.sTexture!);\r\n\r\n        for (let i = 0; i < particlesCoordinates.length; i++) {\r\n            const coordinates = particlesCoordinates[i];\r\n            const timer = (this.timerSmokeMovement + i * 13.37) % 1.0;\r\n            const rotation = i * 35 + this.timerSmokeRotation * (i % 2 === 0 ? 360 : -360); // TODO check units\r\n\r\n            let x = coordinates[0];\r\n            let y = coordinates[1];\r\n            let z = coordinates[2] + timer * this.SMOKE_TRAVEL_Z;\r\n            const scale = timer * this.SMOKE_SCALE;\r\n            const opacity = this.smootherstep(0, 0.4, timer) * (1 - this.smootherstep(0.7, 1.0, timer));\r\n\r\n            z += 4;\r\n\r\n            this.gl.uniform4f(\r\n                this.shaderSoftDiffuseColoredAlpha.color!,\r\n                this.PRESET.colorSmoke.r, this.PRESET.colorSmoke.g, this.PRESET.colorSmoke.b, this.PRESET.colorSmoke.a * opacity\r\n            );\r\n\r\n            this.drawDiffuseVBOFacingCamera(\r\n                this.shaderSoftDiffuseColoredAlpha!,\r\n                this.fmSmoke,\r\n                x, y, z,\r\n                scale, 1, 1,\r\n                rotation\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < particlesCoordinates.length / 2; i++) {\r\n            const coordinates = particlesCoordinates[i];\r\n            const timer = (this.timerSmokeMovement + i * 13.37) % 1.0;\r\n            const rotation = i * 35 + this.timerSmokeRotation * (i % 2 === 0 ? 360 : -360); // TODO check units\r\n\r\n            let x = coordinates[0];\r\n            let y = coordinates[1];\r\n            let z = coordinates[2] + timer * this.SMOKE_TRAVEL_Z * -0.65;\r\n            const scale = timer * this.SMOKE_SCALE * 1.4;\r\n            const opacity = 0.6 * this.smootherstep(0, 0.4, timer) * (1 - this.smootherstep(0.7, 1.0, timer));\r\n\r\n            z += 15;\r\n\r\n            this.gl.uniform4f(\r\n                this.shaderSoftDiffuseColoredAlpha.color!,\r\n                this.PRESET.colorSmoke.r, this.PRESET.colorSmoke.g, this.PRESET.colorSmoke.b, this.PRESET.colorSmoke.a * opacity\r\n            );\r\n\r\n            this.drawDiffuseVBOFacingCamera(\r\n                this.shaderSoftDiffuseColoredAlpha!,\r\n                this.fmSmoke,\r\n                x, y, z,\r\n                scale, 1, 1,\r\n                rotation\r\n            );\r\n        }\r\n    }\r\n\r\n    private drawGhosts(): void {\r\n        if (this.shaderBend === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.gl.disable(this.gl.CULL_FACE);\r\n        this.gl.depthMask(false);\r\n        this.gl.enable(this.gl.BLEND);\r\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        this.shaderBend.use();\r\n        this.shaderBend.setColor(0, 0, 0, 1);\r\n        this.setTexture2D(0, this.textureParticle!, this.shaderBend.sTexture!);\r\n\r\n        this.shaderBend.setColor(0.05, 0.05, 0.05, 0.35);\r\n\r\n        this.shaderBend.setRadius(9 + 3 * (1 + Math.sin((this.timerGhostsRotation2) * Math.PI * 2)));\r\n        this.shaderBend.setLength(0.3);\r\n        this.shaderBend.drawModel(this, this.fmStripe,\r\n            0, 0, 12 + 0.4 * Math.sin(this.timerGhostsRotation * Math.PI * 4),\r\n            0.2, 0.3, (1.5 - this.timerGhostsRotation) * Math.PI * 2,\r\n            1.0, 1.0, 0.18 + 0.06 * (Math.sin((this.timerGhostsRotation2) * Math.PI * 2))\r\n        );\r\n        this.shaderBend.setRadius(9.5 + 3 * (1 + Math.sin((this.timerGhostsRotation2 + 0.3) * Math.PI * 2)));\r\n        this.shaderBend.drawModel(this, this.fmStripe,\r\n            0, 0, 10 - 0.4 * Math.sin((this.timerGhostsRotation + 0.3) * Math.PI * 4),\r\n            -0.1, 0.3, (0.73 - this.timerGhostsRotation) * Math.PI * 2,\r\n            1.0, 1.0, 0.2 + 0.06 * (Math.sin((this.timerGhostsRotation2) * Math.PI * 2))\r\n        );\r\n\r\n        this.shaderBend.setRadius(10 - 3 * (1 + Math.sin((this.timerGhostsRotation2 + 0.55) * Math.PI * 2)));\r\n        this.shaderBend.setLength(-0.3);\r\n        this.shaderBend.drawModel(this, this.fmStripe,\r\n            0, 0, 15 + 0.3 * Math.sin((this.timerGhostsRotation + 0.6) * Math.PI * 4),\r\n            -0.2, -0.3, (this.timerGhostsRotation) * Math.PI * 2,\r\n            1.0, 1.0, 0.2 + 0.06 * (Math.sin((this.timerGhostsRotation2) * Math.PI * 2))\r\n        );\r\n        this.shaderBend.setRadius(8 + 3 * (1 + Math.sin((this.timerGhostsRotation2 + 0.83) * Math.PI * 2)));\r\n        this.shaderBend.drawModel(this, this.fmStripe,\r\n            0, 0, 7 - 0.3 * Math.sin((this.timerGhostsRotation + 0.8) * Math.PI * 4),\r\n            0.1, -0.3, (1.3 + this.timerGhostsRotation) * Math.PI * 2,\r\n            1.0, 1.0, 0.15 + 0.06 * (Math.sin((this.timerGhostsRotation2) * Math.PI * 2))\r\n        );\r\n\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n    }\r\n\r\n    private drawDust(lightIntensity: number): void {\r\n        if (this.shaderPointSpriteColored === undefined) {\r\n            return;\r\n        }\r\n\r\n        const a = this.timerDustRotation * 360;\r\n        const b = -this.timerDustRotation * 360 * 2;\r\n\r\n        const flickering1 = 0.5 + Math.sin(this.timerDustFlickering * Math.PI * 2) / 2;\r\n        const flickering2 = 0.5 + Math.sin((this.timerDustFlickering + 0.3) * Math.PI * 2) / 2;\r\n        const flickering3 = 0.5 + Math.sin((this.timerDustFlickering + 0.5) * Math.PI * 2) / 2;\r\n        const flickering4 = 0.5 + Math.sin((this.timerDustFlickering + 0.6) * Math.PI * 2) / 2;\r\n\r\n        this.shaderPointSpriteColored.use();\r\n        this.setTexture2D(0, this.textureDust!, this.shaderPointSpriteColored.tex0!);\r\n        this.gl.uniform1f(this.shaderPointSpriteColored.uThickness!, this.dustSpriteSize);\r\n\r\n        const colorR = this.DUST_COLOR.r * lightIntensity;\r\n        const colorG = this.DUST_COLOR.g * lightIntensity;\r\n        const colorB = this.DUST_COLOR.b * lightIntensity;\r\n\r\n        this.gl.uniform4f(\r\n            this.shaderPointSpriteColored.color!,\r\n            this.DUST_COLOR.r * flickering1 + colorR,\r\n            this.DUST_COLOR.g * flickering1 + colorG,\r\n            this.DUST_COLOR.b * flickering1 + colorB,\r\n            this.DUST_COLOR.a\r\n        );\r\n        this.drawPointSpritesVBOTranslatedRotatedScaled(\r\n            this.shaderPointSpriteColored,\r\n            this.fmDust,\r\n            0, 2, 11,\r\n            a, b, a,\r\n            this.DUST_SCALE, this.DUST_SCALE, this.DUST_SCALE\r\n        );\r\n\r\n        this.gl.uniform4f(\r\n            this.shaderPointSpriteColored.color!,\r\n            this.DUST_COLOR.r * flickering2 + colorR,\r\n            this.DUST_COLOR.g * flickering2 + colorG,\r\n            this.DUST_COLOR.b * flickering2 + colorB,\r\n            this.DUST_COLOR.a\r\n        );\r\n        this.drawPointSpritesVBOTranslatedRotatedScaled(\r\n            this.shaderPointSpriteColored,\r\n            this.fmDust,\r\n            1, -2, 12,\r\n            b, -a, b,\r\n            this.DUST_SCALE, this.DUST_SCALE, this.DUST_SCALE\r\n        );\r\n\r\n        this.gl.uniform4f(\r\n            this.shaderPointSpriteColored.color!,\r\n            this.DUST_COLOR.r * flickering3 + colorR,\r\n            this.DUST_COLOR.g * flickering3 + colorG,\r\n            this.DUST_COLOR.b * flickering3 + colorB,\r\n            this.DUST_COLOR.a\r\n        );\r\n        this.drawPointSpritesVBOTranslatedRotatedScaled(\r\n            this.shaderPointSpriteColored,\r\n            this.fmDust,\r\n            3, -1, 13,\r\n            -b, -a, -b,\r\n            this.DUST_SCALE, this.DUST_SCALE, this.DUST_SCALE\r\n        );\r\n\r\n        this.gl.uniform4f(\r\n            this.shaderPointSpriteColored.color!,\r\n            this.DUST_COLOR.r * flickering4 + colorR,\r\n            this.DUST_COLOR.g * flickering4 + colorG,\r\n            this.DUST_COLOR.b * flickering4 + colorB,\r\n            this.DUST_COLOR.a\r\n        );\r\n        this.drawPointSpritesVBOTranslatedRotatedScaled(\r\n            this.shaderPointSpriteColored,\r\n            this.fmDust,\r\n            2, -2, 14,\r\n            -a, -a, b,\r\n            this.DUST_SCALE, this.DUST_SCALE, this.DUST_SCALE\r\n        );\r\n    }\r\n\r\n    private drawAnimated(\r\n        shader: IAnimatedTextureChunkedShader,\r\n        timer: number,\r\n        animation: TextureAnimationChunked,\r\n        model: FullModel,\r\n        textureAnimation: WebGLTexture,\r\n        animationTextureWidth = this.ANIMATION_TEXTURE_WIDTH,\r\n        animationType: (\"animateStartEndStart\" | \"animateStartToEnd\") = \"animateStartEndStart\"\r\n    ) {\r\n        this.gl.uniform1i(shader.uTextureWidthInt!, animationTextureWidth);\r\n        this.setTexture2D(0, textureAnimation, shader.sPositions!);\r\n        this.gl.uniform4f(\r\n            shader.uTexelSizes!,\r\n            animation.textureWidth,\r\n            animation.texelHalfWidth,\r\n            animation[animationType](timer),\r\n            animation.chunkSize\r\n        );\r\n        this.gl.uniform1f(shader.uTexelHeight!, 1.0 / animation.textureHeight);\r\n        shader.drawModel(\r\n            this, model,\r\n            0, 0, 0,\r\n            0, 0, 0,\r\n            this.SCALE, this.SCALE, this.SCALE\r\n        );\r\n    }\r\n\r\n    private clamp(i: number, low: number, high: number): number {\r\n        return Math.max(Math.min(i, high), low);\r\n    }\r\n\r\n    private randomizeCamera(): void {\r\n        this.currentRandomCamera = (this.currentRandomCamera + 1 + Math.trunc(Math.random() * (this.CAMERAS.length - 2))) % this.CAMERAS.length;\r\n\r\n        this.cameraPositionInterpolator.speed = this.CAMERA_SPEED * this.CAMERAS[this.currentRandomCamera].speedMultiplier;\r\n        this.cameraPositionInterpolator.position = this.CAMERAS[this.currentRandomCamera];\r\n        this.cameraPositionInterpolator.reset();\r\n    }\r\n\r\n    private randomizeLightning(): void {\r\n        vec3.random(this.lightningDirection, 1);\r\n    }\r\n\r\n    private drawPointSpritesVBOTranslatedRotatedScaled(shader: PointSpriteColoredShader, model: FullModel, tx: number, ty: number, tz: number, rx: number, ry: number, rz: number, sx: number, sy: number, sz: number) {\r\n        model.bindBuffers(this.gl);\r\n\r\n        this.gl.enableVertexAttribArray(shader.aPosition!);\r\n        this.gl.vertexAttribPointer(shader.aPosition!, 3, this.gl.FLOAT, false, 4 * (3 + 2), 0);\r\n\r\n        this.calculateMVPMatrix(tx, ty, tz, rx, ry, rz, sx, sy, sz);\r\n\r\n        this.gl.uniformMatrix4fv(shader.uMvp!, false, this.mMVPMatrix);\r\n        this.gl.drawElements(this.gl.POINTS, model.getNumIndices() * 3, this.gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    private drawDiffuseVBOFacingCamera(shader: DiffuseShader, model: FullModel, tx: number, ty: number, tz: number, sx: number, sy: number, sz: number, rotation: number) {\r\n        model.bindBuffers(this.gl);\r\n\r\n        this.gl.enableVertexAttribArray(shader.rm_Vertex!);\r\n        this.gl.enableVertexAttribArray(shader.rm_TexCoord0!);\r\n        this.gl.vertexAttribPointer(shader.rm_Vertex!, 3, this.gl.FLOAT, false, 4 * (3 + 2), 0);\r\n        this.gl.vertexAttribPointer(shader.rm_TexCoord0!, 2, this.gl.FLOAT, false, 4 * (3 + 2), 4 * 3);\r\n\r\n        this.calculateMVPMatrixForSprite(tx, ty, tz, sx, sy, sz, rotation);\r\n\r\n        this.gl.uniformMatrix4fv(shader.view_proj_matrix!, false, this.mMVPMatrix);\r\n        this.gl.drawElements(this.gl.TRIANGLES, model.getNumIndices() * 3, this.gl.UNSIGNED_SHORT, 0);\r\n        this.checkGlError(\"glDrawElements\");\r\n    }\r\n\r\n    private calculateMVPMatrixForSprite(tx: number, ty: number, tz: number, sx: number, sy: number, sz: number, rotation: number) {\r\n        mat4.identity(this.mMMatrix);\r\n        mat4.translate(this.mMMatrix, this.mMMatrix, [tx, ty, tz]);\r\n        mat4.scale(this.mMMatrix, this.mMMatrix, [sx, sy, sz]);\r\n        mat4.multiply(this.mMVPMatrix, this.mVMatrix, this.mMMatrix);\r\n        this.resetMatrixRotations(this.mMVPMatrix);\r\n        mat4.rotateZ(this.mMVPMatrix, this.mMVPMatrix, rotation);\r\n        mat4.multiply(this.mMVPMatrix, this.mProjMatrix, this.mMVPMatrix);\r\n    }\r\n\r\n    private resetMatrixRotations(matrix: mat4) {\r\n        const d = Math.sqrt(matrix[0] * matrix[0] + matrix[1] * matrix[1] + matrix[2] * matrix[2]);\r\n        matrix[0] = d;\r\n        matrix[4] = 0;\r\n        matrix[8] = 0;\r\n\r\n        matrix[1] = 0;\r\n        matrix[5] = d;\r\n        matrix[9] = 0;\r\n\r\n        matrix[2] = 0;\r\n        matrix[6] = 0;\r\n        matrix[10] = d;\r\n\r\n        matrix[3] = 0;\r\n        matrix[7] = 0;\r\n        matrix[11] = 0;\r\n\r\n        matrix[15] = 1;\r\n    }\r\n\r\n    private initDepthReadShader(shader: SoftDiffuseColoredShader) {\r\n        this.gl.uniform2f(shader.cameraRange!, this.Z_NEAR, this.Z_FAR); // near and far clipping planes\r\n        this.gl.uniform2f(shader.invViewportSize!, 1.0 / this.gl.canvas.width, 1.0 / this.gl.canvas.height); // inverted screen size\r\n        this.gl.uniform1f(shader.transitionSize!, this.SMOKE_SOFTNESS);\r\n        this.setTexture2D(2, this.textureOffscreenDepth!, shader.sDepth!);\r\n    }\r\n\r\n    private smootherstep(edge0: number, edge1: number, x: number): number {\r\n        x = this.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n        return x * x * x * (x * (x * 6 - 15) + 10);\r\n    }\r\n\r\n    private getEyesOpacity(): number {\r\n        const x = this.timerEyes * Math.PI * 2;\r\n        return 0.125 + (Math.sin(x) + 1) * 0.5;\r\n    }\r\n\r\n    private getLightningIntensity(): number {\r\n        const x = this.timerLightning * Math.PI * 2;\r\n        const wave = Math.sin(x * 0.2) - Math.cos(x * 2.34) + Math.sin(x * 15.13) + Math.cos(x * 23.55) - 2.0;\r\n        return wave > 0 ? wave : 0;\r\n    }\r\n}\r\n","import { mat4, vec3 } from \"gl-matrix\";\r\n\r\n/**\r\n * `FpsCamera` configuration options.\r\n */\r\nexport interface FpsCameraOptions {\r\n    /** Canvas element to bind events to. */\r\n    canvas: HTMLElement;\r\n    /** Movement speed. */\r\n    movementSpeed?: number;\r\n    /** Rotation speed. */\r\n    rotationSpeed?: number;\r\n}\r\n\r\n/**\r\n * A Flying Camera allows free motion around the scene using FPS style controls (WASD + mouselook)\r\n * This type of camera is good for displaying large scenes\r\n */\r\nexport class FpsCamera {\r\n    private _dirty = true;\r\n    private _angles = vec3.create();\r\n\r\n    get angles() {\r\n        return this._angles;\r\n    }\r\n\r\n    set angles(value) {\r\n        this._angles = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    private _position = vec3.create();\r\n\r\n    get position() {\r\n        return this._position;\r\n    }\r\n\r\n    set position(value) {\r\n        this._position = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    public speed = 100;\r\n    public rotationSpeed = 0.025;\r\n\r\n    private _cameraMat = mat4.create();\r\n    private _viewMat = mat4.create();\r\n    private projectionMat = mat4.create();\r\n\r\n    private pressedKeys = new Array<boolean>();\r\n\r\n    private canvas: HTMLElement;\r\n\r\n    get viewMat() {\r\n        if (this._dirty) {\r\n            var mv = this._viewMat;\r\n            mat4.identity(mv);\r\n            mat4.rotateX(mv, mv, this.angles[0] - Math.PI / 2.0);\r\n            mat4.rotateZ(mv, mv, this.angles[1]);\r\n            mat4.rotateY(mv, mv, this.angles[2]);\r\n            mat4.translate(mv, mv, [-this.position[0], -this.position[1], - this.position[2]]);\r\n            this._dirty = false;\r\n        }\r\n\r\n        return this._viewMat;\r\n    }\r\n\r\n    constructor(options: FpsCameraOptions) {\r\n        this.canvas = options.canvas;\r\n\r\n        this.speed = options.movementSpeed ?? 100;\r\n        this.rotationSpeed = options.rotationSpeed ?? 0.025;\r\n\r\n        // Set up the appropriate event hooks\r\n        let moving = false;\r\n        let lastX: number, lastY: number;\r\n\r\n        window.addEventListener(\"keydown\", event => this.pressedKeys[event.keyCode] = true);\r\n        window.addEventListener(\"keyup\", event => this.pressedKeys[event.keyCode] = false);\r\n\r\n        this.canvas.addEventListener('contextmenu', event => event.preventDefault());\r\n\r\n        this.canvas.addEventListener('mousedown', event => {\r\n            if (event.which === 3) {\r\n                moving = true;\r\n            }\r\n            lastX = event.pageX;\r\n            lastY = event.pageY;\r\n        });\r\n\r\n        this.canvas.addEventListener('mousemove', event => {\r\n            if (moving) {\r\n                let xDelta = event.pageX - lastX;\r\n                let yDelta = event.pageY - lastY;\r\n                lastX = event.pageX;\r\n                lastY = event.pageY;\r\n\r\n                this.angles[1] += xDelta * this.rotationSpeed;\r\n                if (this.angles[1] < 0) {\r\n                    this.angles[1] += Math.PI * 2;\r\n                }\r\n                if (this.angles[1] >= Math.PI * 2) {\r\n                    this.angles[1] -= Math.PI * 2;\r\n                }\r\n\r\n                this.angles[0] += yDelta * this.rotationSpeed;\r\n                if (this.angles[0] < -Math.PI * 0.5) {\r\n                    this.angles[0] = -Math.PI * 0.5;\r\n                }\r\n                if (this.angles[0] > Math.PI * 0.5) {\r\n                    this.angles[0] = Math.PI * 0.5;\r\n                }\r\n\r\n                this._dirty = true;\r\n            }\r\n        });\r\n\r\n        this.canvas.addEventListener('mouseup', event => moving = false);\r\n    }\r\n\r\n    update(frameTime: number) {\r\n        const dir = vec3.create();\r\n\r\n        let speed = (this.speed / 1000) * frameTime;\r\n\r\n        if (this.pressedKeys[16]) { // Shift, speed up\r\n            speed *= 5;\r\n        }\r\n\r\n        // This is our first person movement code. It's not really pretty, but it works\r\n        if (this.pressedKeys['W'.charCodeAt(0)]) {\r\n            dir[1] += speed;\r\n        }\r\n        if (this.pressedKeys['S'.charCodeAt(0)]) {\r\n            dir[1] -= speed;\r\n        }\r\n        if (this.pressedKeys['A'.charCodeAt(0)]) {\r\n            dir[0] -= speed;\r\n        }\r\n        if (this.pressedKeys['D'.charCodeAt(0)]) {\r\n            dir[0] += speed;\r\n        }\r\n        if (this.pressedKeys[32]) { // Space, moves up\r\n            dir[2] += speed;\r\n        }\r\n        if (this.pressedKeys['C'.charCodeAt(0)]) { // C, moves down\r\n            dir[2] -= speed;\r\n        }\r\n\r\n        if (dir[0] !== 0 || dir[1] !== 0 || dir[2] !== 0) {\r\n            let cam = this._cameraMat;\r\n            mat4.identity(cam);\r\n            mat4.rotateX(cam, cam, this.angles[0]);\r\n            mat4.rotateZ(cam, cam, this.angles[1]);\r\n            mat4.invert(cam, cam);\r\n\r\n            vec3.transformMat4(dir, dir, cam);\r\n\r\n            // Move the camera in the direction we are facing\r\n            vec3.add(this.position, this.position, dir);\r\n\r\n            this._dirty = true;\r\n        }\r\n    }\r\n}\r\n","import { Renderer } from \"./Renderer\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\nimport { FpsCamera, FpsCameraOptions } from \"./FpsCamera\";\r\n\r\nenum MovementMode {\r\n    Free,\r\n    Predefined\r\n};\r\n\r\nexport class FreeMovement {\r\n    private mode: MovementMode;\r\n    private matCamera = mat4.create();\r\n    private matInvCamera = new Float32Array(16);\r\n    private vec3Eye = new Float32Array(3);\r\n    private vec3Rotation = new Float32Array(3);\r\n\r\n    private fpsCamera: FpsCamera | undefined;\r\n\r\n    constructor(private renderer: Renderer, private options: FpsCameraOptions) {\r\n        this.mode = MovementMode.Predefined;\r\n        this.setupControls();\r\n    }\r\n\r\n    private setupControls() {\r\n        document.addEventListener(\"keypress\", (event) => {\r\n            if (event.code === \"Enter\") {\r\n                if (this.mode === MovementMode.Predefined) {\r\n                    this.matCamera = mat4.clone(this.renderer.getViewMatrix());\r\n                    this.renderer.setCustomCamera(this.matCamera);\r\n                    this.mode = MovementMode.Free;\r\n\r\n                    mat4.invert(this.matInvCamera, this.matCamera);\r\n                    mat4.getTranslation(this.vec3Eye, this.matInvCamera);\r\n                    vec3.normalize(this.vec3Rotation, this.vec3Eye);\r\n                    vec3.scale(this.vec3Rotation, this.vec3Rotation, -1);\r\n\r\n                    this.fpsCamera = this.fpsCamera ?? new FpsCamera(this.options);\r\n                    this.fpsCamera.position = this.vec3Eye;\r\n\r\n                    const callback = (time: number) => {\r\n                        if (this.mode !== MovementMode.Free) {\r\n                            return;\r\n                        }\r\n\r\n                        this.fpsCamera!.update(16);\r\n                        this.matCamera = this.fpsCamera!.viewMat;\r\n                        this.renderer.setCustomCamera(this.matCamera, this.fpsCamera!.position, this.fpsCamera!.angles);\r\n\r\n                        requestAnimationFrame(callback);\r\n                    }\r\n                    callback(16);\r\n                } else {\r\n                    this.renderer.resetCustomCamera();\r\n                    this.mode = MovementMode.Predefined;\r\n                }\r\n            }\r\n        });\r\n    };\r\n}\r\n","import { FullScreenUtils } from \"webgl-framework\";\r\nimport { Renderer } from \"./Renderer\";\r\nimport { FreeMovement } from \"./FreeMovement\";\r\n\r\nfunction ready(fn: () => void) {\r\n    if (document.readyState !== \"loading\") {\r\n        fn();\r\n    } else {\r\n        document.addEventListener(\"DOMContentLoaded\", fn);\r\n    }\r\n}\r\n\r\nready(() => {\r\n    initUI();\r\n\r\n    const url = new URL(window.location.href);\r\n    const noLights = url.hash === \"#nolights\";\r\n\r\n    const renderer = new Renderer();\r\n    renderer.lightning = !noLights;\r\n    renderer.init(\"canvasGL\", true);\r\n    const canvas = document.getElementById(\"canvasGL\")!;\r\n    new FreeMovement(\r\n        renderer,\r\n        {\r\n            canvas,\r\n            movementSpeed: 25,\r\n            rotationSpeed: 0.006\r\n        }\r\n    );\r\n\r\n    const fullScreenUtils = new FullScreenUtils();\r\n\r\n    const toggleFullscreenElement = document.getElementById(\"toggleFullscreen\")!;\r\n    toggleFullscreenElement.addEventListener(\"click\", () => {\r\n        if (document.body.classList.contains(\"fs\")) {\r\n            fullScreenUtils.exitFullScreen();\r\n        } else {\r\n            fullScreenUtils.enterFullScreen();\r\n        }\r\n        fullScreenUtils.addFullScreenListener(function () {\r\n            if (fullScreenUtils.isFullScreen()) {\r\n                document.body.classList.add(\"fs\");\r\n            } else {\r\n                document.body.classList.remove(\"fs\");\r\n            }\r\n        });\r\n    });\r\n\r\n    canvas.addEventListener(\"click\", () => renderer.changeScene());\r\n});\r\n\r\nfunction initUI(): void { }\r\n"],"names":["FullScreenUtils","enterFullScreen","document","fullscreenElement","documentElement","requestFullscreen","navigationUI","exitFullScreen","exitFullscreen","addFullScreenListener","exitHandler","addEventListener","isFullScreen","BinaryDataLoader","static","url","fetch","arrayBuffer","UncompressedTextureLoader","gl","minFilter","LINEAR","magFilter","clamp","Promise","resolve","reject","texture","createTexture","image","Image","src","onload","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","REPEAT","console","log","width","height","onerror","Error","TEXTURE_CUBE_MAP","NEAREST","promises","type","TEXTURE_CUBE_MAP_POSITIVE_X","suffix","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","map","face","all","FullModel","constructor","this","numIndices","loadBuffer","buffer","target","byteArray","Uint8Array","byteLength","bindBuffer","bufferData","STATIC_DRAW","async","dataIndices","dataStrides","load","bufferIndices","createBuffer","ELEMENT_ARRAY_BUFFER","bufferStrides","ARRAY_BUFFER","bindBuffers","getNumIndices","BaseShader","vertexShaderCode","fragmentShaderCode","fillCode","initShader","getShader","code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","warn","getShaderInfoLog","getUniform","uniform","undefined","program","result","getUniformLocation","getAttrib","attrib","getAttribLocation","fragmentShader","FRAGMENT_SHADER","vertexShader","VERTEX_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","name","useProgram","fillUniformsAttributes","use","deleteProgram","ARRAY_TYPE","Float32Array","Array","create$3","out","multiply$3","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","create$4","fromValues$4","x","y","z","cross","ax","ay","az","bx","by","bz","Math","hypot","i","arguments","length","sqrt","vec","len","create$6","slerp","t","omega","cosom","sinom","scale0","scale1","aw","bw","acos","sin","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","normalize$2","w","create$8","FrameBuffer","m_textureHandle","m_depthTextureHandle","m_framebufferHandle","m_depthbufferHandle","createGLData","m_width","m_height","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkGlError","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","error","op","getError","NO_ERROR","value","textureHandle","depthbufferHandle","framebufferHandle","depthTextureHandle","TextureUtils","texWidth","texHeight","hasAlpha","textureID","texParameterf","glFormat","glInternalFormat","RGB","version","getParameter","VERSION","DEPTH_COMPONENT","includes","UNSIGNED_SHORT","DiffuseShader","view_proj_matrix","rm_Vertex","rm_TexCoord0","sTexture","drawModel","renderer","model","tx","ty","tz","rx","ry","rz","sx","sy","sz","enableVertexAttribArray","vertexAttribPointer","FLOAT","calculateMVPMatrix","uniformMatrix4fv","getMVPMatrix","drawElements","TRIANGLES","RANDOM","random","create","glMatrix.ARRAY_TYPE","identity","invert","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","translate","v","rotateX","rad","s","c","cos","rotateY","rotateZ","ortho","left","right","bottom","top","near","far","lr","bt","nf","CameraMode","DiffuseColoredShader","super","color","setColor","r","g","_color","uniform4f","BendShader","radius","lengthToRadius","setRadius","_radius","setLength","l","_length","uniform1f","CameraPositionInterpolator","vec3.create","mat4.create","cameraPosition","_cameraPosition","cameraRotation","_cameraRotation","reverse","_reverse","minDuration","_minDuration","matrix","_matrix","speed","_speed","position","_position","duration","max","getLength","timer","_timer","start","end","iterate","timeNow","lastTime","elapsed","updateMatrix","reset","rotation","mat4.identity","mat4.rotateX","PI","mat4.rotateZ","mat4.rotateY","mat4.translate","DiffuseAlphaShader","sAlphaTexture","DiffuseAnimatedTextureShader","sPositions","uTexelSizes","HALF_FLOAT","DiffuseAnimatedTextureChunkedShader","uTextureWidthInt","uTexelHeight","TextureAnimationChunked","textureWidth","vertices","frames","m_textureWidth","m_vertices","m_frames","m_textureHeight","ceil","m_texelHalfWidth","m_texelHalfHeight","m_texelHeight","m_chunkSize","chunkSize","texelHalfWidth","texelHalfHeight","textureHeight","animateStartEndStart","coeff","animateStartToEnd","PointSpriteColoredShader","uMvp","uThickness","aPosition","tex0","AtAnimatedTextureChunkedShader","LitAnimatedTextureChunkedShader","sNormals","uLightDir","uLightColor","uLightIntensity","SoftDiffuseColoredShader","cameraRange","sDepth","invViewportSize","transitionSize","SoftDiffuseColoredAlphaShader","DiffuseAnimatedTextureChunkedColoredShader","uColor","SkyShader","sDisplacement","uTime","uLightning","uLightningExponent","DiffuseOneChannelShader","DepthAnimatedTextureChunkedShader","VertexVignetteShader","color0","color1","rm_AO","drawVignette","getOrthoMatrix","particlesCoordinates","Renderer","mMMatrix","mVMatrix","mMVPMatrix","mProjMatrix","matOrtho","m_boundTick","tick","bind","isWebGL2","viewportWidth","viewportHeight","m_gl","logGLError","err","setTexture2D","textureUnit","activeTexture","TEXTURE0","uniform1i","setTextureCubemap","setFOV","fovY","aspect","zNear","zFar","fH","tan","fW","rl","tb","frustum","identity$3","axis","b12","b20","b21","b22","rotate$3","translate$2","scale$3","drawScene","viewport","canvas","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","requestAnimationFrame","resizeCanvas","animate","initGL","getContext","alpha","initGL2","init","canvasID","requestWebGL2","onBeforeInit","getElementById","onAfterInit","initShaders","loadData","onInitError","cssToRealPixels","window","devicePixelRatio","displayWidth","floor","clientWidth","displayHeight","clientHeight","operation","unbindBuffers","getModelMatrix","getViewMatrix","idle1","REAPER_ANIMATION_TEXTURE_WIDTH","idle2","fly","Random","speedMultiplier","bodySuffix","clothSuffix","colorEyes","colorSky","colorSmoke","PRESETS","cameraPositionInterpolator","CAMERA_SPEED","CAMERA_MIN_DURATION","randomizeCamera","event","key","CAMERAS","logCamera","randomizeLightning","lightning","useLightning","camera","toString","setCustomCamera","customCamera","resetCustomCamera","classList","add","remove","shaderDiffuse","shaderDiffuseAnimatedTexture","shaderDiffuseAnimatedTextureChunked","shaderDiffuseAnimatedTextureChunkedColored","shaderAtAnimatedTextureChunked","shaderLitAnimatedTextureChunked","shaderDiffuseAlpha","shaderDiffuseColored","shaderDiffuseOneChannel","shaderBend","shaderPointSpriteColored","shaderSoftDiffuseColored","shaderSoftDiffuseColoredAlpha","shaderSky","shaderDepthAnimated","shaderVignette","response","data","dataView","Uint16Array","Int8Array","pixelStorei","UNPACK_ALIGNMENT","RGB16F","RGB8_SNORM","BYTE","promiseModels","fmSky","fmStripe","fmDust","fmBody","fmScythe","fmCloth","fmEyes","fmSmoke","fmVignette","promiseTextures","PRESET","loadFloatingPointTexture","currentAnimation","animationsBody","animationsScythe","animationsCloth","animationsEyes","models","textures","textureSky","textureParticle","textureDisplacement","textureDust","textureBody","textureCloth","textureBodyAnim","textureBodyNormalsAnim","textureScytheAnim","textureScytheNormalsAnim","textureClothAnim","textureEyesAnim","textureEyes","textureSmoke","textureVignette","LINEAR_MIPMAP_LINEAR","generateMipmap","initOffscreen","initVignette","loaded","setTimeout","querySelector","textureOffscreenColor","createNpotTexture","textureOffscreenDepth","createDepthTexture","fboOffscreen","mat4.ortho","mQuadTriangles","mTriangleVerticesVignette","Date","getTime","angleYaw","timerDustRotation","DUST_ROTATION_SPEED","timerDustFlickering","DUST_FLICKERING_SPEED","prevLightning","timerLightning","timerCharacterAnimation","REAPER_ANIMATION_PERIOD","timerSkyAnimation","SKY_ANIMATION_PERIOD","timerSmokeMovement","SMOKE_MOVEMENT_PERIOD","timerSmokeRotation","SMOKE_ROTATION_PERIOD","timerSkyRotation","SKY_ROTATION_PERIOD","timerGhostsRotation","GHOSTS_ROTATION_PERIOD","timerGhostsRotation2","GHOSTS_ROTATION_PERIOD2","timerEyes","EYES_PERIOD","LIGHTNING_PERIOD","setCameraFOV","multiplier","ratio","fov","Z_NEAR","Z_FAR","dustSpriteSize","min","DUST_SPRITE_SIZE","positionCamera","cameraMode","sina","cosa","cosa2","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","mat4.lookAt","colorMask","depthMask","enable","DEPTH_TEST","drawDepthObjects","CULL_FACE","cullFace","BACK","drawSceneObjects","drawTestDepth","disable","BLEND","drawSceneVignette","drawVignetteObject","drawArrays","TRIANGLE_STRIP","drawAnimated","light","getLightningIntensity","lightningDirection","eyesOpacity","getEyesOpacity","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","drawParticles","drawGhosts","drawDust","DST_COLOR","SRC_COLOR","ZERO","initDepthReadShader","coordinates","SMOKE_TRAVEL_Z","scale","SMOKE_SCALE","opacity","smootherstep","drawDiffuseVBOFacingCamera","lightIntensity","flickering1","flickering2","flickering3","flickering4","colorR","DUST_COLOR","colorG","colorB","drawPointSpritesVBOTranslatedRotatedScaled","DUST_SCALE","animation","textureAnimation","animationTextureWidth","ANIMATION_TEXTURE_WIDTH","animationType","SCALE","low","high","currentRandomCamera","trunc","glMatrix.RANDOM","zScale","vec3.random","POINTS","calculateMVPMatrixForSprite","mat4.scale","mat4.multiply","resetMatrixRotations","d","uniform2f","SMOKE_SOFTNESS","edge0","edge1","wave","FpsCamera","options","movementSpeed","rotationSpeed","lastX","lastY","moving","pressedKeys","keyCode","preventDefault","which","pageX","pageY","xDelta","yDelta","angles","_dirty","_angles","viewMat","mv","_viewMat","update","frameTime","dir","charCodeAt","cam","_cameraMat","mat4.invert","m","vec3.transformMat4","vec3.add","MovementMode","fn","FreeMovement","mode","Predefined","setupControls","matCamera","mat4.clone","Free","matInvCamera","mat","mat4.getTranslation","vec3Eye","vec3.normalize","vec3Rotation","vec3.scale","fpsCamera","callback","time","noLights","URL","location","href","hash","fullScreenUtils","body","contains","changeScene","readyState"],"mappings":"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"}